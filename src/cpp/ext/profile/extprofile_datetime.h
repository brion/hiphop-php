
#ifndef __EXTPROFILE_DATETIME_H__
#define __EXTPROFILE_DATETIME_H__

// >>>>>> Generated by idl.php. Do NOT modify. <<<<<<

#include <cpp/ext/ext_datetime.h>

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

#ifndef PROFILE_BUILTIN
#define x_checkdate f_checkdate
#else
inline bool x_checkdate(int month, int day, int year) {
  FUNCTION_INJECTION(checkdate);
  return f_checkdate(month, day, year);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_date_create f_date_create
#else
inline Object x_date_create(CStrRef time = null_string, CObjRef timezone = null_object) {
  FUNCTION_INJECTION(date_create);
  return f_date_create(time, timezone);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_date_date_set f_date_date_set
#else
inline void x_date_date_set(CObjRef object, int year, int month, int day) {
  FUNCTION_INJECTION(date_date_set);
  f_date_date_set(object, year, month, day);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_date_default_timezone_get f_date_default_timezone_get
#else
inline String x_date_default_timezone_get() {
  FUNCTION_INJECTION(date_default_timezone_get);
  return f_date_default_timezone_get();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_date_default_timezone_set f_date_default_timezone_set
#else
inline bool x_date_default_timezone_set(CStrRef name) {
  FUNCTION_INJECTION(date_default_timezone_set);
  return f_date_default_timezone_set(name);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_date_format f_date_format
#else
inline String x_date_format(CObjRef object, CStrRef format) {
  FUNCTION_INJECTION(date_format);
  return f_date_format(object, format);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_date_isodate_set f_date_isodate_set
#else
inline void x_date_isodate_set(CObjRef object, int year, int week, int day = 1) {
  FUNCTION_INJECTION(date_isodate_set);
  f_date_isodate_set(object, year, week, day);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_date_modify f_date_modify
#else
inline void x_date_modify(CObjRef object, CStrRef modify) {
  FUNCTION_INJECTION(date_modify);
  f_date_modify(object, modify);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_date_offset_get f_date_offset_get
#else
inline int x_date_offset_get(CObjRef object) {
  FUNCTION_INJECTION(date_offset_get);
  return f_date_offset_get(object);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_date_parse f_date_parse
#else
inline Variant x_date_parse(CStrRef date) {
  FUNCTION_INJECTION(date_parse);
  return f_date_parse(date);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_date_sun_info f_date_sun_info
#else
inline Array x_date_sun_info(int64 ts, double latitude, double longitude) {
  FUNCTION_INJECTION(date_sun_info);
  return f_date_sun_info(ts, latitude, longitude);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_date_sunrise f_date_sunrise
#else
inline Variant x_date_sunrise(int64 timestamp, int format = 0, double latitude = 0.0, double longitude = 0.0, double zenith = 0.0, double gmt_offset = 99999.0) {
  FUNCTION_INJECTION(date_sunrise);
  return f_date_sunrise(timestamp, format, latitude, longitude, zenith, gmt_offset);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_date_sunset f_date_sunset
#else
inline Variant x_date_sunset(int64 timestamp, int format = 0, double latitude = 0.0, double longitude = 0.0, double zenith = 0.0, double gmt_offset = 99999.0) {
  FUNCTION_INJECTION(date_sunset);
  return f_date_sunset(timestamp, format, latitude, longitude, zenith, gmt_offset);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_date_time_set f_date_time_set
#else
inline void x_date_time_set(CObjRef object, int hour, int minute, int second = 0) {
  FUNCTION_INJECTION(date_time_set);
  f_date_time_set(object, hour, minute, second);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_date_timezone_get f_date_timezone_get
#else
inline Variant x_date_timezone_get(CObjRef object) {
  FUNCTION_INJECTION(date_timezone_get);
  return f_date_timezone_get(object);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_date_timezone_set f_date_timezone_set
#else
inline void x_date_timezone_set(CObjRef object, CObjRef timezone) {
  FUNCTION_INJECTION(date_timezone_set);
  f_date_timezone_set(object, timezone);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_date f_date
#else
inline String x_date(CStrRef format, int64 timestamp = TimeStamp::Current()) {
  FUNCTION_INJECTION(date);
  return f_date(format, timestamp);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_getdate f_getdate
#else
inline Array x_getdate(int64 timestamp = TimeStamp::Current()) {
  FUNCTION_INJECTION(getdate);
  return f_getdate(timestamp);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_gettimeofday f_gettimeofday
#else
inline Variant x_gettimeofday(bool return_float = false) {
  FUNCTION_INJECTION(gettimeofday);
  return f_gettimeofday(return_float);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_gmdate f_gmdate
#else
inline String x_gmdate(CStrRef format, int64 timestamp = TimeStamp::Current()) {
  FUNCTION_INJECTION(gmdate);
  return f_gmdate(format, timestamp);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_gmmktime f_gmmktime
#else
inline Variant x_gmmktime(int hour = -1, int minute = -1, int second = -1, int month = -1, int day = -1, int year = -1) {
  FUNCTION_INJECTION(gmmktime);
  return f_gmmktime(hour, minute, second, month, day, year);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_gmstrftime f_gmstrftime
#else
inline String x_gmstrftime(CStrRef format, int64 timestamp = TimeStamp::Current()) {
  FUNCTION_INJECTION(gmstrftime);
  return f_gmstrftime(format, timestamp);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_idate f_idate
#else
inline int64 x_idate(CStrRef format, int64 timestamp = TimeStamp::Current()) {
  FUNCTION_INJECTION(idate);
  return f_idate(format, timestamp);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_localtime f_localtime
#else
inline Array x_localtime(int64 timestamp = TimeStamp::Current(), bool is_associative = false) {
  FUNCTION_INJECTION(localtime);
  return f_localtime(timestamp, is_associative);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_microtime f_microtime
#else
inline Variant x_microtime(bool get_as_float = false) {
  FUNCTION_INJECTION(microtime);
  return f_microtime(get_as_float);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_mktime f_mktime
#else
inline Variant x_mktime(int hour = -1, int minute = -1, int second = -1, int month = -1, int day = -1, int year = -1) {
  FUNCTION_INJECTION(mktime);
  return f_mktime(hour, minute, second, month, day, year);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_strftime f_strftime
#else
inline String x_strftime(CStrRef format, int64 timestamp = TimeStamp::Current()) {
  FUNCTION_INJECTION(strftime);
  return f_strftime(format, timestamp);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_strptime f_strptime
#else
inline Variant x_strptime(CStrRef date, CStrRef format) {
  FUNCTION_INJECTION(strptime);
  return f_strptime(date, format);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_strtotime f_strtotime
#else
inline Variant x_strtotime(CStrRef input, int64 timestamp = TimeStamp::Current()) {
  FUNCTION_INJECTION(strtotime);
  return f_strtotime(input, timestamp);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_time f_time
#else
inline int x_time() {
  FUNCTION_INJECTION(time);
  return f_time();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_timezone_abbreviations_list f_timezone_abbreviations_list
#else
inline Array x_timezone_abbreviations_list() {
  FUNCTION_INJECTION(timezone_abbreviations_list);
  return f_timezone_abbreviations_list();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_timezone_identifiers_list f_timezone_identifiers_list
#else
inline Array x_timezone_identifiers_list() {
  FUNCTION_INJECTION(timezone_identifiers_list);
  return f_timezone_identifiers_list();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_timezone_name_from_abbr f_timezone_name_from_abbr
#else
inline Variant x_timezone_name_from_abbr(CStrRef abbr, int gmtoffset = -1, bool isdst = true) {
  FUNCTION_INJECTION(timezone_name_from_abbr);
  return f_timezone_name_from_abbr(abbr, gmtoffset, isdst);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_timezone_name_get f_timezone_name_get
#else
inline String x_timezone_name_get(CObjRef object) {
  FUNCTION_INJECTION(timezone_name_get);
  return f_timezone_name_get(object);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_timezone_offset_get f_timezone_offset_get
#else
inline int x_timezone_offset_get(CObjRef object, CObjRef dt) {
  FUNCTION_INJECTION(timezone_offset_get);
  return f_timezone_offset_get(object, dt);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_timezone_open f_timezone_open
#else
inline Object x_timezone_open(CStrRef timezone) {
  FUNCTION_INJECTION(timezone_open);
  return f_timezone_open(timezone);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_timezone_transitions_get f_timezone_transitions_get
#else
inline Array x_timezone_transitions_get(CObjRef object) {
  FUNCTION_INJECTION(timezone_transitions_get);
  return f_timezone_transitions_get(object);
}
#endif


///////////////////////////////////////////////////////////////////////////////
}

#endif // __EXTPROFILE_DATETIME_H__
