/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
   | Copyright (c) 1997-2010 The PHP Group                                |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/

#ifndef __EXTPROFILE_MISC_H__
#define __EXTPROFILE_MISC_H__

// >>>>>> Generated by idl.php. Do NOT modify. <<<<<<

#include <cpp/ext/ext_misc.h>

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

#ifndef PROFILE_BUILTIN
#define x_connection_aborted f_connection_aborted
#else
inline int x_connection_aborted() {
  FUNCTION_INJECTION(connection_aborted);
  return f_connection_aborted();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_connection_status f_connection_status
#else
inline int x_connection_status() {
  FUNCTION_INJECTION(connection_status);
  return f_connection_status();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_connection_timeout f_connection_timeout
#else
inline int x_connection_timeout() {
  FUNCTION_INJECTION(connection_timeout);
  return f_connection_timeout();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_constant f_constant
#else
inline Variant x_constant(CStrRef name) {
  FUNCTION_INJECTION(constant);
  return f_constant(name);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_define f_define
#else
inline bool x_define(CStrRef name, CVarRef value, bool case_insensitive = false) {
  FUNCTION_INJECTION(define);
  return f_define(name, value, case_insensitive);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_defined f_defined
#else
inline bool x_defined(CStrRef name) {
  FUNCTION_INJECTION(defined);
  return f_defined(name);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_die f_die
#else
inline Variant x_die(CVarRef status = null_variant) {
  FUNCTION_INJECTION(die);
  return f_die(status);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_exit f_exit
#else
inline Variant x_exit(CVarRef status = null_variant) {
  FUNCTION_INJECTION(exit);
  return f_exit(status);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_eval f_eval
#else
inline Variant x_eval(CStrRef code_str) {
  FUNCTION_INJECTION(eval);
  return f_eval(code_str);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_get_browser f_get_browser
#else
inline Variant x_get_browser(CStrRef user_agent = null_string, bool return_array = false) {
  FUNCTION_INJECTION(get_browser);
  return f_get_browser(user_agent, return_array);
}
#endif

#ifndef PROFILE_BUILTIN
#define x___halt_compiler f___halt_compiler
#else
inline void x___halt_compiler() {
  FUNCTION_INJECTION(__halt_compiler);
  f___halt_compiler();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_highlight_file f_highlight_file
#else
inline Variant x_highlight_file(CStrRef filename, bool ret = false) {
  FUNCTION_INJECTION(highlight_file);
  return f_highlight_file(filename, ret);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_show_source f_show_source
#else
inline Variant x_show_source(CStrRef filename, bool ret = false) {
  FUNCTION_INJECTION(show_source);
  return f_show_source(filename, ret);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_highlight_string f_highlight_string
#else
inline Variant x_highlight_string(CStrRef str, bool ret = false) {
  FUNCTION_INJECTION(highlight_string);
  return f_highlight_string(str, ret);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_ignore_user_abort f_ignore_user_abort
#else
inline int x_ignore_user_abort(bool setting = false) {
  FUNCTION_INJECTION(ignore_user_abort);
  return f_ignore_user_abort(setting);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pack f_pack
#else
inline String x_pack(int _argc, CStrRef format, CArrRef _argv = null_array) {
  FUNCTION_INJECTION(pack);
  return f_pack(_argc, format, _argv);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_php_check_syntax f_php_check_syntax
#else
inline bool x_php_check_syntax(CStrRef filename, Variant error_message = null) {
  FUNCTION_INJECTION(php_check_syntax);
  return f_php_check_syntax(filename, ref(error_message));
}
#endif

#ifndef PROFILE_BUILTIN
#define x_php_strip_whitespace f_php_strip_whitespace
#else
inline String x_php_strip_whitespace(CStrRef filename) {
  FUNCTION_INJECTION(php_strip_whitespace);
  return f_php_strip_whitespace(filename);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_sleep f_sleep
#else
inline int x_sleep(int seconds) {
  FUNCTION_INJECTION(sleep);
  return f_sleep(seconds);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_usleep f_usleep
#else
inline void x_usleep(int micro_seconds) {
  FUNCTION_INJECTION(usleep);
  f_usleep(micro_seconds);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_time_nanosleep f_time_nanosleep
#else
inline Variant x_time_nanosleep(int seconds, int nanoseconds) {
  FUNCTION_INJECTION(time_nanosleep);
  return f_time_nanosleep(seconds, nanoseconds);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_time_sleep_until f_time_sleep_until
#else
inline bool x_time_sleep_until(double timestamp) {
  FUNCTION_INJECTION(time_sleep_until);
  return f_time_sleep_until(timestamp);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_uniqid f_uniqid
#else
inline String x_uniqid(CStrRef prefix = null_string, bool more_entropy = false) {
  FUNCTION_INJECTION(uniqid);
  return f_uniqid(prefix, more_entropy);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_unpack f_unpack
#else
inline Array x_unpack(CStrRef format, CStrRef data) {
  FUNCTION_INJECTION(unpack);
  return f_unpack(format, data);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_sys_getloadavg f_sys_getloadavg
#else
inline Array x_sys_getloadavg() {
  FUNCTION_INJECTION(sys_getloadavg);
  return f_sys_getloadavg();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_token_get_all f_token_get_all
#else
inline Array x_token_get_all(CStrRef source) {
  FUNCTION_INJECTION(token_get_all);
  return f_token_get_all(source);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_token_name f_token_name
#else
inline String x_token_name(int64 token) {
  FUNCTION_INJECTION(token_name);
  return f_token_name(token);
}
#endif


///////////////////////////////////////////////////////////////////////////////
}

#endif // __EXTPROFILE_MISC_H__
