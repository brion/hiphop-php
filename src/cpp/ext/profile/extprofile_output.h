/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
   | Copyright (c) 1997-2010 The PHP Group                                |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/

#ifndef __EXTPROFILE_OUTPUT_H__
#define __EXTPROFILE_OUTPUT_H__

// >>>>>> Generated by idl.php. Do NOT modify. <<<<<<

#include <cpp/ext/ext_output.h>

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

#ifndef PROFILE_BUILTIN
#define x_ob_start f_ob_start
#else
inline bool x_ob_start(CVarRef output_callback = null, int chunk_size = 0, bool erase = true) {
  FUNCTION_INJECTION(ob_start);
  return f_ob_start(output_callback, chunk_size, erase);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_ob_clean f_ob_clean
#else
inline void x_ob_clean() {
  FUNCTION_INJECTION(ob_clean);
  f_ob_clean();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_ob_flush f_ob_flush
#else
inline void x_ob_flush() {
  FUNCTION_INJECTION(ob_flush);
  f_ob_flush();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_ob_end_clean f_ob_end_clean
#else
inline bool x_ob_end_clean() {
  FUNCTION_INJECTION(ob_end_clean);
  return f_ob_end_clean();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_ob_end_flush f_ob_end_flush
#else
inline bool x_ob_end_flush() {
  FUNCTION_INJECTION(ob_end_flush);
  return f_ob_end_flush();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_flush f_flush
#else
inline void x_flush() {
  FUNCTION_INJECTION(flush);
  f_flush();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_ob_get_clean f_ob_get_clean
#else
inline String x_ob_get_clean() {
  FUNCTION_INJECTION(ob_get_clean);
  return f_ob_get_clean();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_ob_get_contents f_ob_get_contents
#else
inline String x_ob_get_contents() {
  FUNCTION_INJECTION(ob_get_contents);
  return f_ob_get_contents();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_ob_get_flush f_ob_get_flush
#else
inline String x_ob_get_flush() {
  FUNCTION_INJECTION(ob_get_flush);
  return f_ob_get_flush();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_ob_get_length f_ob_get_length
#else
inline int x_ob_get_length() {
  FUNCTION_INJECTION(ob_get_length);
  return f_ob_get_length();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_ob_get_level f_ob_get_level
#else
inline int x_ob_get_level() {
  FUNCTION_INJECTION(ob_get_level);
  return f_ob_get_level();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_ob_get_status f_ob_get_status
#else
inline Array x_ob_get_status(bool full_status = false) {
  FUNCTION_INJECTION(ob_get_status);
  return f_ob_get_status(full_status);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_ob_gzhandler f_ob_gzhandler
#else
inline String x_ob_gzhandler(CStrRef buffer, int mode) {
  FUNCTION_INJECTION(ob_gzhandler);
  return f_ob_gzhandler(buffer, mode);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_ob_implicit_flush f_ob_implicit_flush
#else
inline void x_ob_implicit_flush(bool flag = true) {
  FUNCTION_INJECTION(ob_implicit_flush);
  f_ob_implicit_flush(flag);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_ob_list_handlers f_ob_list_handlers
#else
inline Array x_ob_list_handlers() {
  FUNCTION_INJECTION(ob_list_handlers);
  return f_ob_list_handlers();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_output_add_rewrite_var f_output_add_rewrite_var
#else
inline bool x_output_add_rewrite_var(CStrRef name, CStrRef value) {
  FUNCTION_INJECTION(output_add_rewrite_var);
  return f_output_add_rewrite_var(name, value);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_output_reset_rewrite_vars f_output_reset_rewrite_vars
#else
inline bool x_output_reset_rewrite_vars() {
  FUNCTION_INJECTION(output_reset_rewrite_vars);
  return f_output_reset_rewrite_vars();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_hphp_log f_hphp_log
#else
inline bool x_hphp_log(CStrRef filename, CStrRef message) {
  FUNCTION_INJECTION(hphp_log);
  return f_hphp_log(filename, message);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_hphp_stats f_hphp_stats
#else
inline void x_hphp_stats(CStrRef name, int64 value) {
  FUNCTION_INJECTION(hphp_stats);
  f_hphp_stats(name, value);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_hphp_get_stats f_hphp_get_stats
#else
inline int64 x_hphp_get_stats(CStrRef name) {
  FUNCTION_INJECTION(hphp_get_stats);
  return f_hphp_get_stats(name);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_hphp_output_global_state f_hphp_output_global_state
#else
inline void x_hphp_output_global_state(CStrRef filename = null_string) {
  FUNCTION_INJECTION(hphp_output_global_state);
  f_hphp_output_global_state(filename);
}
#endif


///////////////////////////////////////////////////////////////////////////////
}

#endif // __EXTPROFILE_OUTPUT_H__
