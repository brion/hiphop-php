/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
   | Copyright (c) 1997-2010 The PHP Group                                |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/

#ifndef __EXTPROFILE_STREAM_H__
#define __EXTPROFILE_STREAM_H__

// >>>>>> Generated by idl.php. Do NOT modify. <<<<<<

#include <cpp/ext/ext_stream.h>

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

#ifndef PROFILE_BUILTIN
#define x_stream_context_create f_stream_context_create
#else
inline Object x_stream_context_create(CArrRef options = null_array, CArrRef params = null_array) {
  FUNCTION_INJECTION(stream_context_create);
  return f_stream_context_create(options, params);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_context_get_default f_stream_context_get_default
#else
inline Object x_stream_context_get_default(CArrRef options = null_array) {
  FUNCTION_INJECTION(stream_context_get_default);
  return f_stream_context_get_default(options);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_context_get_options f_stream_context_get_options
#else
inline Array x_stream_context_get_options(CObjRef stream_or_context) {
  FUNCTION_INJECTION(stream_context_get_options);
  return f_stream_context_get_options(stream_or_context);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_context_set_option f_stream_context_set_option
#else
inline bool x_stream_context_set_option(CObjRef stream_or_context, CVarRef wrapper, CStrRef option = null_string, CVarRef value = null_variant) {
  FUNCTION_INJECTION(stream_context_set_option);
  return f_stream_context_set_option(stream_or_context, wrapper, option, value);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_context_set_param f_stream_context_set_param
#else
inline bool x_stream_context_set_param(CObjRef stream_or_context, CArrRef params) {
  FUNCTION_INJECTION(stream_context_set_param);
  return f_stream_context_set_param(stream_or_context, params);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_copy_to_stream f_stream_copy_to_stream
#else
inline Variant x_stream_copy_to_stream(CObjRef source, CObjRef dest, int maxlength = 0, int offset = 0) {
  FUNCTION_INJECTION(stream_copy_to_stream);
  return f_stream_copy_to_stream(source, dest, maxlength, offset);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_encoding f_stream_encoding
#else
inline bool x_stream_encoding(CObjRef stream, CStrRef encoding = null_string) {
  FUNCTION_INJECTION(stream_encoding);
  return f_stream_encoding(stream, encoding);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_bucket_append f_stream_bucket_append
#else
inline void x_stream_bucket_append(CObjRef brigade, CObjRef bucket) {
  FUNCTION_INJECTION(stream_bucket_append);
  f_stream_bucket_append(brigade, bucket);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_bucket_prepend f_stream_bucket_prepend
#else
inline void x_stream_bucket_prepend(CObjRef brigade, CObjRef bucket) {
  FUNCTION_INJECTION(stream_bucket_prepend);
  f_stream_bucket_prepend(brigade, bucket);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_bucket_make_writeable f_stream_bucket_make_writeable
#else
inline Object x_stream_bucket_make_writeable(CObjRef brigade) {
  FUNCTION_INJECTION(stream_bucket_make_writeable);
  return f_stream_bucket_make_writeable(brigade);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_bucket_new f_stream_bucket_new
#else
inline Object x_stream_bucket_new(CObjRef stream, CStrRef buffer) {
  FUNCTION_INJECTION(stream_bucket_new);
  return f_stream_bucket_new(stream, buffer);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_filter_register f_stream_filter_register
#else
inline bool x_stream_filter_register(CStrRef filtername, CStrRef classname) {
  FUNCTION_INJECTION(stream_filter_register);
  return f_stream_filter_register(filtername, classname);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_filter_remove f_stream_filter_remove
#else
inline bool x_stream_filter_remove(CObjRef stream_filter) {
  FUNCTION_INJECTION(stream_filter_remove);
  return f_stream_filter_remove(stream_filter);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_filter_append f_stream_filter_append
#else
inline Object x_stream_filter_append(CObjRef stream, CStrRef filtername, int read_write = 0, CVarRef params = null_variant) {
  FUNCTION_INJECTION(stream_filter_append);
  return f_stream_filter_append(stream, filtername, read_write, params);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_filter_prepend f_stream_filter_prepend
#else
inline Object x_stream_filter_prepend(CObjRef stream, CStrRef filtername, int read_write = 0, CVarRef params = null_variant) {
  FUNCTION_INJECTION(stream_filter_prepend);
  return f_stream_filter_prepend(stream, filtername, read_write, params);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_get_contents f_stream_get_contents
#else
inline Variant x_stream_get_contents(CObjRef handle, int maxlen = 0, int offset = 0) {
  FUNCTION_INJECTION(stream_get_contents);
  return f_stream_get_contents(handle, maxlen, offset);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_get_filters f_stream_get_filters
#else
inline Array x_stream_get_filters() {
  FUNCTION_INJECTION(stream_get_filters);
  return f_stream_get_filters();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_get_line f_stream_get_line
#else
inline Variant x_stream_get_line(CObjRef handle, int length = 0, CStrRef ending = null_string) {
  FUNCTION_INJECTION(stream_get_line);
  return f_stream_get_line(handle, length, ending);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_get_meta_data f_stream_get_meta_data
#else
inline Array x_stream_get_meta_data(CObjRef stream) {
  FUNCTION_INJECTION(stream_get_meta_data);
  return f_stream_get_meta_data(stream);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_get_transports f_stream_get_transports
#else
inline Array x_stream_get_transports() {
  FUNCTION_INJECTION(stream_get_transports);
  return f_stream_get_transports();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_get_wrappers f_stream_get_wrappers
#else
inline Array x_stream_get_wrappers() {
  FUNCTION_INJECTION(stream_get_wrappers);
  return f_stream_get_wrappers();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_register_wrapper f_stream_register_wrapper
#else
inline bool x_stream_register_wrapper(CStrRef protocol, CStrRef classname) {
  FUNCTION_INJECTION(stream_register_wrapper);
  return f_stream_register_wrapper(protocol, classname);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_wrapper_register f_stream_wrapper_register
#else
inline bool x_stream_wrapper_register(CStrRef protocol, CStrRef classname) {
  FUNCTION_INJECTION(stream_wrapper_register);
  return f_stream_wrapper_register(protocol, classname);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_wrapper_restore f_stream_wrapper_restore
#else
inline bool x_stream_wrapper_restore(CStrRef protocol) {
  FUNCTION_INJECTION(stream_wrapper_restore);
  return f_stream_wrapper_restore(protocol);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_wrapper_unregister f_stream_wrapper_unregister
#else
inline bool x_stream_wrapper_unregister(CStrRef protocol) {
  FUNCTION_INJECTION(stream_wrapper_unregister);
  return f_stream_wrapper_unregister(protocol);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_resolve_include_path f_stream_resolve_include_path
#else
inline String x_stream_resolve_include_path(CStrRef filename, CObjRef context = null_object) {
  FUNCTION_INJECTION(stream_resolve_include_path);
  return f_stream_resolve_include_path(filename, context);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_select f_stream_select
#else
inline Variant x_stream_select(Variant read, Variant write, Variant except, CVarRef vtv_sec, int tv_usec = 0) {
  FUNCTION_INJECTION(stream_select);
  return f_stream_select(ref(read), ref(write), ref(except), vtv_sec, tv_usec);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_set_blocking f_stream_set_blocking
#else
inline bool x_stream_set_blocking(CObjRef stream, int mode) {
  FUNCTION_INJECTION(stream_set_blocking);
  return f_stream_set_blocking(stream, mode);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_set_timeout f_stream_set_timeout
#else
inline bool x_stream_set_timeout(CObjRef stream, int seconds, int microseconds = 0) {
  FUNCTION_INJECTION(stream_set_timeout);
  return f_stream_set_timeout(stream, seconds, microseconds);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_set_write_buffer f_stream_set_write_buffer
#else
inline int x_stream_set_write_buffer(CObjRef stream, int buffer) {
  FUNCTION_INJECTION(stream_set_write_buffer);
  return f_stream_set_write_buffer(stream, buffer);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_set_file_buffer f_set_file_buffer
#else
inline int x_set_file_buffer(CObjRef stream, int buffer) {
  FUNCTION_INJECTION(set_file_buffer);
  return f_set_file_buffer(stream, buffer);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_socket_accept f_stream_socket_accept
#else
inline Variant x_stream_socket_accept(CObjRef server_socket, double timeout = 0.0, Variant peername = null) {
  FUNCTION_INJECTION(stream_socket_accept);
  return f_stream_socket_accept(server_socket, timeout, ref(peername));
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_socket_server f_stream_socket_server
#else
inline Variant x_stream_socket_server(CStrRef local_socket, Variant errnum = null, Variant errstr = null, int flags = 0, CObjRef context = null_object) {
  FUNCTION_INJECTION(stream_socket_server);
  return f_stream_socket_server(local_socket, ref(errnum), ref(errstr), flags, context);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_socket_client f_stream_socket_client
#else
inline Variant x_stream_socket_client(CStrRef remote_socket, Variant errnum = null, Variant errstr = null, double timeout = 0.0, int flags = 0, CObjRef context = null_object) {
  FUNCTION_INJECTION(stream_socket_client);
  return f_stream_socket_client(remote_socket, ref(errnum), ref(errstr), timeout, flags, context);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_socket_enable_crypto f_stream_socket_enable_crypto
#else
inline Variant x_stream_socket_enable_crypto(CObjRef stream, bool enable, int crypto_type = 0, CObjRef session_stream = null_object) {
  FUNCTION_INJECTION(stream_socket_enable_crypto);
  return f_stream_socket_enable_crypto(stream, enable, crypto_type, session_stream);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_socket_get_name f_stream_socket_get_name
#else
inline Variant x_stream_socket_get_name(CObjRef handle, bool want_peer) {
  FUNCTION_INJECTION(stream_socket_get_name);
  return f_stream_socket_get_name(handle, want_peer);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_socket_pair f_stream_socket_pair
#else
inline Variant x_stream_socket_pair(int domain, int type, int protocol) {
  FUNCTION_INJECTION(stream_socket_pair);
  return f_stream_socket_pair(domain, type, protocol);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_socket_recvfrom f_stream_socket_recvfrom
#else
inline Variant x_stream_socket_recvfrom(CObjRef socket, int length, int flags = 0, CStrRef address = null_string) {
  FUNCTION_INJECTION(stream_socket_recvfrom);
  return f_stream_socket_recvfrom(socket, length, flags, address);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_socket_sendto f_stream_socket_sendto
#else
inline Variant x_stream_socket_sendto(CObjRef socket, CStrRef data, int flags = 0, CStrRef address = null_string) {
  FUNCTION_INJECTION(stream_socket_sendto);
  return f_stream_socket_sendto(socket, data, flags, address);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_stream_socket_shutdown f_stream_socket_shutdown
#else
inline bool x_stream_socket_shutdown(CObjRef stream, int how) {
  FUNCTION_INJECTION(stream_socket_shutdown);
  return f_stream_socket_shutdown(stream, how);
}
#endif


///////////////////////////////////////////////////////////////////////////////
}

#endif // __EXTPROFILE_STREAM_H__
