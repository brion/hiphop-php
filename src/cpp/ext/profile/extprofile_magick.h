/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
   | Copyright (c) 1997-2010 The PHP Group                                |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/

#ifndef __EXTPROFILE_MAGICK_H__
#define __EXTPROFILE_MAGICK_H__

// >>>>>> Generated by idl.php. Do NOT modify. <<<<<<

#include <cpp/ext/ext_magick.h>

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

#ifndef PROFILE_BUILTIN
#define x_magickgetcopyright f_magickgetcopyright
#else
inline String x_magickgetcopyright() {
  FUNCTION_INJECTION(magickgetcopyright);
  return f_magickgetcopyright();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgethomeurl f_magickgethomeurl
#else
inline String x_magickgethomeurl() {
  FUNCTION_INJECTION(magickgethomeurl);
  return f_magickgethomeurl();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetpackagename f_magickgetpackagename
#else
inline String x_magickgetpackagename() {
  FUNCTION_INJECTION(magickgetpackagename);
  return f_magickgetpackagename();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetquantumdepth f_magickgetquantumdepth
#else
inline double x_magickgetquantumdepth() {
  FUNCTION_INJECTION(magickgetquantumdepth);
  return f_magickgetquantumdepth();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetreleasedate f_magickgetreleasedate
#else
inline String x_magickgetreleasedate() {
  FUNCTION_INJECTION(magickgetreleasedate);
  return f_magickgetreleasedate();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetresourcelimit f_magickgetresourcelimit
#else
inline double x_magickgetresourcelimit(int resource_type) {
  FUNCTION_INJECTION(magickgetresourcelimit);
  return f_magickgetresourcelimit(resource_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetversion f_magickgetversion
#else
inline Array x_magickgetversion() {
  FUNCTION_INJECTION(magickgetversion);
  return f_magickgetversion();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetversionnumber f_magickgetversionnumber
#else
inline int x_magickgetversionnumber() {
  FUNCTION_INJECTION(magickgetversionnumber);
  return f_magickgetversionnumber();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetversionstring f_magickgetversionstring
#else
inline String x_magickgetversionstring() {
  FUNCTION_INJECTION(magickgetversionstring);
  return f_magickgetversionstring();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickqueryconfigureoption f_magickqueryconfigureoption
#else
inline String x_magickqueryconfigureoption(CStrRef option) {
  FUNCTION_INJECTION(magickqueryconfigureoption);
  return f_magickqueryconfigureoption(option);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickqueryconfigureoptions f_magickqueryconfigureoptions
#else
inline Array x_magickqueryconfigureoptions(CStrRef pattern) {
  FUNCTION_INJECTION(magickqueryconfigureoptions);
  return f_magickqueryconfigureoptions(pattern);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickqueryfonts f_magickqueryfonts
#else
inline Array x_magickqueryfonts(CStrRef pattern) {
  FUNCTION_INJECTION(magickqueryfonts);
  return f_magickqueryfonts(pattern);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickqueryformats f_magickqueryformats
#else
inline Array x_magickqueryformats(CStrRef pattern) {
  FUNCTION_INJECTION(magickqueryformats);
  return f_magickqueryformats(pattern);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetresourcelimit f_magicksetresourcelimit
#else
inline bool x_magicksetresourcelimit(int resource_type, double limit) {
  FUNCTION_INJECTION(magicksetresourcelimit);
  return f_magicksetresourcelimit(resource_type, limit);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_newdrawingwand f_newdrawingwand
#else
inline Object x_newdrawingwand() {
  FUNCTION_INJECTION(newdrawingwand);
  return f_newdrawingwand();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_newmagickwand f_newmagickwand
#else
inline Object x_newmagickwand() {
  FUNCTION_INJECTION(newmagickwand);
  return f_newmagickwand();
}
#endif

#ifndef PROFILE_BUILTIN
#define x_newpixeliterator f_newpixeliterator
#else
inline Object x_newpixeliterator(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(newpixeliterator);
  return f_newpixeliterator(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_newpixelregioniterator f_newpixelregioniterator
#else
inline Object x_newpixelregioniterator(CObjRef mgck_wnd, int x, int y, int columns, int rows) {
  FUNCTION_INJECTION(newpixelregioniterator);
  return f_newpixelregioniterator(mgck_wnd, x, y, columns, rows);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_newpixelwand f_newpixelwand
#else
inline Object x_newpixelwand(CStrRef imagemagick_col_str = null_string) {
  FUNCTION_INJECTION(newpixelwand);
  return f_newpixelwand(imagemagick_col_str);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_newpixelwandarray f_newpixelwandarray
#else
inline Array x_newpixelwandarray(int num_pxl_wnds) {
  FUNCTION_INJECTION(newpixelwandarray);
  return f_newpixelwandarray(num_pxl_wnds);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_newpixelwands f_newpixelwands
#else
inline Array x_newpixelwands(int num_pxl_wnds) {
  FUNCTION_INJECTION(newpixelwands);
  return f_newpixelwands(num_pxl_wnds);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_destroydrawingwand f_destroydrawingwand
#else
inline void x_destroydrawingwand(CObjRef drw_wnd) {
  FUNCTION_INJECTION(destroydrawingwand);
  f_destroydrawingwand(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_destroymagickwand f_destroymagickwand
#else
inline void x_destroymagickwand(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(destroymagickwand);
  f_destroymagickwand(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_destroypixeliterator f_destroypixeliterator
#else
inline void x_destroypixeliterator(CObjRef pxl_iter) {
  FUNCTION_INJECTION(destroypixeliterator);
  f_destroypixeliterator(pxl_iter);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_destroypixelwand f_destroypixelwand
#else
inline void x_destroypixelwand(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(destroypixelwand);
  f_destroypixelwand(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_destroypixelwandarray f_destroypixelwandarray
#else
inline void x_destroypixelwandarray(CArrRef pxl_wnd_array) {
  FUNCTION_INJECTION(destroypixelwandarray);
  f_destroypixelwandarray(pxl_wnd_array);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_destroypixelwands f_destroypixelwands
#else
inline void x_destroypixelwands(CArrRef pxl_wnd_array) {
  FUNCTION_INJECTION(destroypixelwands);
  f_destroypixelwands(pxl_wnd_array);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_isdrawingwand f_isdrawingwand
#else
inline bool x_isdrawingwand(CVarRef var) {
  FUNCTION_INJECTION(isdrawingwand);
  return f_isdrawingwand(var);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_ismagickwand f_ismagickwand
#else
inline bool x_ismagickwand(CVarRef var) {
  FUNCTION_INJECTION(ismagickwand);
  return f_ismagickwand(var);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_ispixeliterator f_ispixeliterator
#else
inline bool x_ispixeliterator(CVarRef var) {
  FUNCTION_INJECTION(ispixeliterator);
  return f_ispixeliterator(var);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_ispixelwand f_ispixelwand
#else
inline bool x_ispixelwand(CVarRef var) {
  FUNCTION_INJECTION(ispixelwand);
  return f_ispixelwand(var);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_cleardrawingwand f_cleardrawingwand
#else
inline void x_cleardrawingwand(CObjRef drw_wnd) {
  FUNCTION_INJECTION(cleardrawingwand);
  f_cleardrawingwand(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_clearmagickwand f_clearmagickwand
#else
inline void x_clearmagickwand(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(clearmagickwand);
  f_clearmagickwand(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_clearpixeliterator f_clearpixeliterator
#else
inline void x_clearpixeliterator(CObjRef pxl_iter) {
  FUNCTION_INJECTION(clearpixeliterator);
  f_clearpixeliterator(pxl_iter);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_clearpixelwand f_clearpixelwand
#else
inline void x_clearpixelwand(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(clearpixelwand);
  f_clearpixelwand(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_clonedrawingwand f_clonedrawingwand
#else
inline Object x_clonedrawingwand(CObjRef drw_wnd) {
  FUNCTION_INJECTION(clonedrawingwand);
  return f_clonedrawingwand(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_clonemagickwand f_clonemagickwand
#else
inline Object x_clonemagickwand(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(clonemagickwand);
  return f_clonemagickwand(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_wandgetexception f_wandgetexception
#else
inline Array x_wandgetexception(CObjRef wnd) {
  FUNCTION_INJECTION(wandgetexception);
  return f_wandgetexception(wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_wandgetexceptionstring f_wandgetexceptionstring
#else
inline String x_wandgetexceptionstring(CObjRef wnd) {
  FUNCTION_INJECTION(wandgetexceptionstring);
  return f_wandgetexceptionstring(wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_wandgetexceptiontype f_wandgetexceptiontype
#else
inline int x_wandgetexceptiontype(CObjRef wnd) {
  FUNCTION_INJECTION(wandgetexceptiontype);
  return f_wandgetexceptiontype(wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_wandhasexception f_wandhasexception
#else
inline bool x_wandhasexception(CObjRef wnd) {
  FUNCTION_INJECTION(wandhasexception);
  return f_wandhasexception(wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawaffine f_drawaffine
#else
inline void x_drawaffine(CObjRef drw_wnd, double sx, double sy, double rx, double ry, double tx, double ty) {
  FUNCTION_INJECTION(drawaffine);
  f_drawaffine(drw_wnd, sx, sy, rx, ry, tx, ty);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawannotation f_drawannotation
#else
inline void x_drawannotation(CObjRef drw_wnd, double x, double y, CStrRef text) {
  FUNCTION_INJECTION(drawannotation);
  f_drawannotation(drw_wnd, x, y, text);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawarc f_drawarc
#else
inline void x_drawarc(CObjRef drw_wnd, double sx, double sy, double ex, double ey, double sd, double ed) {
  FUNCTION_INJECTION(drawarc);
  f_drawarc(drw_wnd, sx, sy, ex, ey, sd, ed);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawbezier f_drawbezier
#else
inline void x_drawbezier(CObjRef drw_wnd, CArrRef x_y_points_array) {
  FUNCTION_INJECTION(drawbezier);
  f_drawbezier(drw_wnd, x_y_points_array);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawcircle f_drawcircle
#else
inline void x_drawcircle(CObjRef drw_wnd, double ox, double oy, double px, double py) {
  FUNCTION_INJECTION(drawcircle);
  f_drawcircle(drw_wnd, ox, oy, px, py);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawcolor f_drawcolor
#else
inline void x_drawcolor(CObjRef drw_wnd, double x, double y, int paint_method) {
  FUNCTION_INJECTION(drawcolor);
  f_drawcolor(drw_wnd, x, y, paint_method);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawcomment f_drawcomment
#else
inline void x_drawcomment(CObjRef drw_wnd, CStrRef comment) {
  FUNCTION_INJECTION(drawcomment);
  f_drawcomment(drw_wnd, comment);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawcomposite f_drawcomposite
#else
inline bool x_drawcomposite(CObjRef drw_wnd, int composite_operator, double x, double y, double width, double height, CObjRef mgck_wnd) {
  FUNCTION_INJECTION(drawcomposite);
  return f_drawcomposite(drw_wnd, composite_operator, x, y, width, height, mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawellipse f_drawellipse
#else
inline void x_drawellipse(CObjRef drw_wnd, double ox, double oy, double rx, double ry, double start, double end) {
  FUNCTION_INJECTION(drawellipse);
  f_drawellipse(drw_wnd, ox, oy, rx, ry, start, end);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetclippath f_drawgetclippath
#else
inline String x_drawgetclippath(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetclippath);
  return f_drawgetclippath(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetcliprule f_drawgetcliprule
#else
inline int x_drawgetcliprule(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetcliprule);
  return f_drawgetcliprule(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetclipunits f_drawgetclipunits
#else
inline int x_drawgetclipunits(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetclipunits);
  return f_drawgetclipunits(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetexception f_drawgetexception
#else
inline Array x_drawgetexception(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetexception);
  return f_drawgetexception(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetexceptionstring f_drawgetexceptionstring
#else
inline String x_drawgetexceptionstring(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetexceptionstring);
  return f_drawgetexceptionstring(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetexceptiontype f_drawgetexceptiontype
#else
inline int x_drawgetexceptiontype(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetexceptiontype);
  return f_drawgetexceptiontype(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetfillalpha f_drawgetfillalpha
#else
inline double x_drawgetfillalpha(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetfillalpha);
  return f_drawgetfillalpha(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetfillcolor f_drawgetfillcolor
#else
inline Object x_drawgetfillcolor(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetfillcolor);
  return f_drawgetfillcolor(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetfillopacity f_drawgetfillopacity
#else
inline double x_drawgetfillopacity(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetfillopacity);
  return f_drawgetfillopacity(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetfillrule f_drawgetfillrule
#else
inline int x_drawgetfillrule(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetfillrule);
  return f_drawgetfillrule(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetfont f_drawgetfont
#else
inline String x_drawgetfont(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetfont);
  return f_drawgetfont(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetfontfamily f_drawgetfontfamily
#else
inline String x_drawgetfontfamily(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetfontfamily);
  return f_drawgetfontfamily(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetfontsize f_drawgetfontsize
#else
inline double x_drawgetfontsize(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetfontsize);
  return f_drawgetfontsize(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetfontstretch f_drawgetfontstretch
#else
inline int x_drawgetfontstretch(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetfontstretch);
  return f_drawgetfontstretch(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetfontstyle f_drawgetfontstyle
#else
inline int x_drawgetfontstyle(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetfontstyle);
  return f_drawgetfontstyle(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetfontweight f_drawgetfontweight
#else
inline double x_drawgetfontweight(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetfontweight);
  return f_drawgetfontweight(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetgravity f_drawgetgravity
#else
inline int x_drawgetgravity(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetgravity);
  return f_drawgetgravity(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetstrokealpha f_drawgetstrokealpha
#else
inline double x_drawgetstrokealpha(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetstrokealpha);
  return f_drawgetstrokealpha(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetstrokeantialias f_drawgetstrokeantialias
#else
inline bool x_drawgetstrokeantialias(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetstrokeantialias);
  return f_drawgetstrokeantialias(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetstrokecolor f_drawgetstrokecolor
#else
inline Object x_drawgetstrokecolor(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetstrokecolor);
  return f_drawgetstrokecolor(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetstrokedasharray f_drawgetstrokedasharray
#else
inline Array x_drawgetstrokedasharray(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetstrokedasharray);
  return f_drawgetstrokedasharray(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetstrokedashoffset f_drawgetstrokedashoffset
#else
inline double x_drawgetstrokedashoffset(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetstrokedashoffset);
  return f_drawgetstrokedashoffset(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetstrokelinecap f_drawgetstrokelinecap
#else
inline int x_drawgetstrokelinecap(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetstrokelinecap);
  return f_drawgetstrokelinecap(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetstrokelinejoin f_drawgetstrokelinejoin
#else
inline int x_drawgetstrokelinejoin(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetstrokelinejoin);
  return f_drawgetstrokelinejoin(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetstrokemiterlimit f_drawgetstrokemiterlimit
#else
inline double x_drawgetstrokemiterlimit(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetstrokemiterlimit);
  return f_drawgetstrokemiterlimit(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetstrokeopacity f_drawgetstrokeopacity
#else
inline double x_drawgetstrokeopacity(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetstrokeopacity);
  return f_drawgetstrokeopacity(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetstrokewidth f_drawgetstrokewidth
#else
inline double x_drawgetstrokewidth(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetstrokewidth);
  return f_drawgetstrokewidth(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgettextalignment f_drawgettextalignment
#else
inline int x_drawgettextalignment(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgettextalignment);
  return f_drawgettextalignment(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgettextantialias f_drawgettextantialias
#else
inline bool x_drawgettextantialias(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgettextantialias);
  return f_drawgettextantialias(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgettextdecoration f_drawgettextdecoration
#else
inline int x_drawgettextdecoration(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgettextdecoration);
  return f_drawgettextdecoration(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgettextencoding f_drawgettextencoding
#else
inline String x_drawgettextencoding(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgettextencoding);
  return f_drawgettextencoding(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgettextundercolor f_drawgettextundercolor
#else
inline Object x_drawgettextundercolor(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgettextundercolor);
  return f_drawgettextundercolor(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawgetvectorgraphics f_drawgetvectorgraphics
#else
inline String x_drawgetvectorgraphics(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawgetvectorgraphics);
  return f_drawgetvectorgraphics(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawline f_drawline
#else
inline void x_drawline(CObjRef drw_wnd, double sx, double sy, double ex, double ey) {
  FUNCTION_INJECTION(drawline);
  f_drawline(drw_wnd, sx, sy, ex, ey);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawmatte f_drawmatte
#else
inline void x_drawmatte(CObjRef drw_wnd, double x, double y, int paint_method) {
  FUNCTION_INJECTION(drawmatte);
  f_drawmatte(drw_wnd, x, y, paint_method);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpathclose f_drawpathclose
#else
inline void x_drawpathclose(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawpathclose);
  f_drawpathclose(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpathcurvetoabsolute f_drawpathcurvetoabsolute
#else
inline void x_drawpathcurvetoabsolute(CObjRef drw_wnd, double x1, double y1, double x2, double y2, double x, double y) {
  FUNCTION_INJECTION(drawpathcurvetoabsolute);
  f_drawpathcurvetoabsolute(drw_wnd, x1, y1, x2, y2, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpathcurvetoquadraticbezierabsolute f_drawpathcurvetoquadraticbezierabsolute
#else
inline void x_drawpathcurvetoquadraticbezierabsolute(CObjRef drw_wnd, double x1, double y1, double x, double y) {
  FUNCTION_INJECTION(drawpathcurvetoquadraticbezierabsolute);
  f_drawpathcurvetoquadraticbezierabsolute(drw_wnd, x1, y1, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpathcurvetoquadraticbezierrelative f_drawpathcurvetoquadraticbezierrelative
#else
inline void x_drawpathcurvetoquadraticbezierrelative(CObjRef drw_wnd, double x1, double y1, double x, double y) {
  FUNCTION_INJECTION(drawpathcurvetoquadraticbezierrelative);
  f_drawpathcurvetoquadraticbezierrelative(drw_wnd, x1, y1, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpathcurvetoquadraticbeziersmoothabsolute f_drawpathcurvetoquadraticbeziersmoothabsolute
#else
inline void x_drawpathcurvetoquadraticbeziersmoothabsolute(CObjRef drw_wnd, double x, double y) {
  FUNCTION_INJECTION(drawpathcurvetoquadraticbeziersmoothabsolute);
  f_drawpathcurvetoquadraticbeziersmoothabsolute(drw_wnd, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpathcurvetoquadraticbeziersmoothrelative f_drawpathcurvetoquadraticbeziersmoothrelative
#else
inline void x_drawpathcurvetoquadraticbeziersmoothrelative(CObjRef drw_wnd, double x, double y) {
  FUNCTION_INJECTION(drawpathcurvetoquadraticbeziersmoothrelative);
  f_drawpathcurvetoquadraticbeziersmoothrelative(drw_wnd, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpathcurvetorelative f_drawpathcurvetorelative
#else
inline void x_drawpathcurvetorelative(CObjRef drw_wnd, double x1, double y1, double x2, double y2, double x, double y) {
  FUNCTION_INJECTION(drawpathcurvetorelative);
  f_drawpathcurvetorelative(drw_wnd, x1, y1, x2, y2, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpathcurvetosmoothabsolute f_drawpathcurvetosmoothabsolute
#else
inline void x_drawpathcurvetosmoothabsolute(CObjRef drw_wnd, double x2, double y2, double x, double y) {
  FUNCTION_INJECTION(drawpathcurvetosmoothabsolute);
  f_drawpathcurvetosmoothabsolute(drw_wnd, x2, y2, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpathcurvetosmoothrelative f_drawpathcurvetosmoothrelative
#else
inline void x_drawpathcurvetosmoothrelative(CObjRef drw_wnd, double x2, double y2, double x, double y) {
  FUNCTION_INJECTION(drawpathcurvetosmoothrelative);
  f_drawpathcurvetosmoothrelative(drw_wnd, x2, y2, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpathellipticarcabsolute f_drawpathellipticarcabsolute
#else
inline void x_drawpathellipticarcabsolute(CObjRef drw_wnd, double rx, double ry, double x_axis_rotation, bool large_arc_flag, bool sweep_flag, double x, double y) {
  FUNCTION_INJECTION(drawpathellipticarcabsolute);
  f_drawpathellipticarcabsolute(drw_wnd, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpathellipticarcrelative f_drawpathellipticarcrelative
#else
inline void x_drawpathellipticarcrelative(CObjRef drw_wnd, double rx, double ry, double x_axis_rotation, bool large_arc_flag, bool sweep_flag, double x, double y) {
  FUNCTION_INJECTION(drawpathellipticarcrelative);
  f_drawpathellipticarcrelative(drw_wnd, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpathfinish f_drawpathfinish
#else
inline void x_drawpathfinish(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawpathfinish);
  f_drawpathfinish(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpathlinetoabsolute f_drawpathlinetoabsolute
#else
inline void x_drawpathlinetoabsolute(CObjRef drw_wnd, double x, double y) {
  FUNCTION_INJECTION(drawpathlinetoabsolute);
  f_drawpathlinetoabsolute(drw_wnd, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpathlinetohorizontalabsolute f_drawpathlinetohorizontalabsolute
#else
inline void x_drawpathlinetohorizontalabsolute(CObjRef drw_wnd, double x) {
  FUNCTION_INJECTION(drawpathlinetohorizontalabsolute);
  f_drawpathlinetohorizontalabsolute(drw_wnd, x);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpathlinetohorizontalrelative f_drawpathlinetohorizontalrelative
#else
inline void x_drawpathlinetohorizontalrelative(CObjRef drw_wnd, double x) {
  FUNCTION_INJECTION(drawpathlinetohorizontalrelative);
  f_drawpathlinetohorizontalrelative(drw_wnd, x);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpathlinetorelative f_drawpathlinetorelative
#else
inline void x_drawpathlinetorelative(CObjRef drw_wnd, double x, double y) {
  FUNCTION_INJECTION(drawpathlinetorelative);
  f_drawpathlinetorelative(drw_wnd, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpathlinetoverticalabsolute f_drawpathlinetoverticalabsolute
#else
inline void x_drawpathlinetoverticalabsolute(CObjRef drw_wnd, double y) {
  FUNCTION_INJECTION(drawpathlinetoverticalabsolute);
  f_drawpathlinetoverticalabsolute(drw_wnd, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpathlinetoverticalrelative f_drawpathlinetoverticalrelative
#else
inline void x_drawpathlinetoverticalrelative(CObjRef drw_wnd, double y) {
  FUNCTION_INJECTION(drawpathlinetoverticalrelative);
  f_drawpathlinetoverticalrelative(drw_wnd, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpathmovetoabsolute f_drawpathmovetoabsolute
#else
inline void x_drawpathmovetoabsolute(CObjRef drw_wnd, double x, double y) {
  FUNCTION_INJECTION(drawpathmovetoabsolute);
  f_drawpathmovetoabsolute(drw_wnd, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpathmovetorelative f_drawpathmovetorelative
#else
inline void x_drawpathmovetorelative(CObjRef drw_wnd, double x, double y) {
  FUNCTION_INJECTION(drawpathmovetorelative);
  f_drawpathmovetorelative(drw_wnd, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpathstart f_drawpathstart
#else
inline void x_drawpathstart(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawpathstart);
  f_drawpathstart(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpoint f_drawpoint
#else
inline void x_drawpoint(CObjRef drw_wnd, double x, double y) {
  FUNCTION_INJECTION(drawpoint);
  f_drawpoint(drw_wnd, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpolygon f_drawpolygon
#else
inline void x_drawpolygon(CObjRef drw_wnd, CArrRef x_y_points_array) {
  FUNCTION_INJECTION(drawpolygon);
  f_drawpolygon(drw_wnd, x_y_points_array);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpolyline f_drawpolyline
#else
inline void x_drawpolyline(CObjRef drw_wnd, CArrRef x_y_points_array) {
  FUNCTION_INJECTION(drawpolyline);
  f_drawpolyline(drw_wnd, x_y_points_array);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawrectangle f_drawrectangle
#else
inline void x_drawrectangle(CObjRef drw_wnd, double x1, double y1, double x2, double y2) {
  FUNCTION_INJECTION(drawrectangle);
  f_drawrectangle(drw_wnd, x1, y1, x2, y2);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawrender f_drawrender
#else
inline bool x_drawrender(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawrender);
  return f_drawrender(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawrotate f_drawrotate
#else
inline void x_drawrotate(CObjRef drw_wnd, double degrees) {
  FUNCTION_INJECTION(drawrotate);
  f_drawrotate(drw_wnd, degrees);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawroundrectangle f_drawroundrectangle
#else
inline void x_drawroundrectangle(CObjRef drw_wnd, double x1, double y1, double x2, double y2, double rx, double ry) {
  FUNCTION_INJECTION(drawroundrectangle);
  f_drawroundrectangle(drw_wnd, x1, y1, x2, y2, rx, ry);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawscale f_drawscale
#else
inline void x_drawscale(CObjRef drw_wnd, double x, double y) {
  FUNCTION_INJECTION(drawscale);
  f_drawscale(drw_wnd, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetclippath f_drawsetclippath
#else
inline bool x_drawsetclippath(CObjRef drw_wnd, CStrRef clip_path) {
  FUNCTION_INJECTION(drawsetclippath);
  return f_drawsetclippath(drw_wnd, clip_path);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetcliprule f_drawsetcliprule
#else
inline void x_drawsetcliprule(CObjRef drw_wnd, int fill_rule) {
  FUNCTION_INJECTION(drawsetcliprule);
  f_drawsetcliprule(drw_wnd, fill_rule);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetclipunits f_drawsetclipunits
#else
inline void x_drawsetclipunits(CObjRef drw_wnd, int clip_path_units) {
  FUNCTION_INJECTION(drawsetclipunits);
  f_drawsetclipunits(drw_wnd, clip_path_units);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetfillalpha f_drawsetfillalpha
#else
inline void x_drawsetfillalpha(CObjRef drw_wnd, double fill_opacity) {
  FUNCTION_INJECTION(drawsetfillalpha);
  f_drawsetfillalpha(drw_wnd, fill_opacity);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetfillcolor f_drawsetfillcolor
#else
inline void x_drawsetfillcolor(CObjRef drw_wnd, CObjRef fill_pxl_wnd) {
  FUNCTION_INJECTION(drawsetfillcolor);
  f_drawsetfillcolor(drw_wnd, fill_pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetfillopacity f_drawsetfillopacity
#else
inline void x_drawsetfillopacity(CObjRef drw_wnd, double fill_opacity) {
  FUNCTION_INJECTION(drawsetfillopacity);
  f_drawsetfillopacity(drw_wnd, fill_opacity);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetfillpatternurl f_drawsetfillpatternurl
#else
inline bool x_drawsetfillpatternurl(CObjRef drw_wnd, CStrRef fill_url) {
  FUNCTION_INJECTION(drawsetfillpatternurl);
  return f_drawsetfillpatternurl(drw_wnd, fill_url);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetfillrule f_drawsetfillrule
#else
inline void x_drawsetfillrule(CObjRef drw_wnd, int fill_rule) {
  FUNCTION_INJECTION(drawsetfillrule);
  f_drawsetfillrule(drw_wnd, fill_rule);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetfont f_drawsetfont
#else
inline bool x_drawsetfont(CObjRef drw_wnd, CStrRef font_file) {
  FUNCTION_INJECTION(drawsetfont);
  return f_drawsetfont(drw_wnd, font_file);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetfontfamily f_drawsetfontfamily
#else
inline bool x_drawsetfontfamily(CObjRef drw_wnd, CStrRef font_family) {
  FUNCTION_INJECTION(drawsetfontfamily);
  return f_drawsetfontfamily(drw_wnd, font_family);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetfontsize f_drawsetfontsize
#else
inline void x_drawsetfontsize(CObjRef drw_wnd, double pointsize) {
  FUNCTION_INJECTION(drawsetfontsize);
  f_drawsetfontsize(drw_wnd, pointsize);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetfontstretch f_drawsetfontstretch
#else
inline void x_drawsetfontstretch(CObjRef drw_wnd, int stretch_type) {
  FUNCTION_INJECTION(drawsetfontstretch);
  f_drawsetfontstretch(drw_wnd, stretch_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetfontstyle f_drawsetfontstyle
#else
inline void x_drawsetfontstyle(CObjRef drw_wnd, int style_type) {
  FUNCTION_INJECTION(drawsetfontstyle);
  f_drawsetfontstyle(drw_wnd, style_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetfontweight f_drawsetfontweight
#else
inline void x_drawsetfontweight(CObjRef drw_wnd, double font_weight) {
  FUNCTION_INJECTION(drawsetfontweight);
  f_drawsetfontweight(drw_wnd, font_weight);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetgravity f_drawsetgravity
#else
inline void x_drawsetgravity(CObjRef drw_wnd, int gravity_type) {
  FUNCTION_INJECTION(drawsetgravity);
  f_drawsetgravity(drw_wnd, gravity_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetstrokealpha f_drawsetstrokealpha
#else
inline void x_drawsetstrokealpha(CObjRef drw_wnd, double stroke_opacity) {
  FUNCTION_INJECTION(drawsetstrokealpha);
  f_drawsetstrokealpha(drw_wnd, stroke_opacity);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetstrokeantialias f_drawsetstrokeantialias
#else
inline void x_drawsetstrokeantialias(CObjRef drw_wnd, bool stroke_antialias = true) {
  FUNCTION_INJECTION(drawsetstrokeantialias);
  f_drawsetstrokeantialias(drw_wnd, stroke_antialias);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetstrokecolor f_drawsetstrokecolor
#else
inline void x_drawsetstrokecolor(CObjRef drw_wnd, CObjRef strokecolor_pxl_wnd) {
  FUNCTION_INJECTION(drawsetstrokecolor);
  f_drawsetstrokecolor(drw_wnd, strokecolor_pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetstrokedasharray f_drawsetstrokedasharray
#else
inline void x_drawsetstrokedasharray(CObjRef drw_wnd, CArrRef dash_array = null_array) {
  FUNCTION_INJECTION(drawsetstrokedasharray);
  f_drawsetstrokedasharray(drw_wnd, dash_array);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetstrokedashoffset f_drawsetstrokedashoffset
#else
inline void x_drawsetstrokedashoffset(CObjRef drw_wnd, double dash_offset) {
  FUNCTION_INJECTION(drawsetstrokedashoffset);
  f_drawsetstrokedashoffset(drw_wnd, dash_offset);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetstrokelinecap f_drawsetstrokelinecap
#else
inline void x_drawsetstrokelinecap(CObjRef drw_wnd, int line_cap) {
  FUNCTION_INJECTION(drawsetstrokelinecap);
  f_drawsetstrokelinecap(drw_wnd, line_cap);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetstrokelinejoin f_drawsetstrokelinejoin
#else
inline void x_drawsetstrokelinejoin(CObjRef drw_wnd, int line_join) {
  FUNCTION_INJECTION(drawsetstrokelinejoin);
  f_drawsetstrokelinejoin(drw_wnd, line_join);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetstrokemiterlimit f_drawsetstrokemiterlimit
#else
inline void x_drawsetstrokemiterlimit(CObjRef drw_wnd, double miterlimit) {
  FUNCTION_INJECTION(drawsetstrokemiterlimit);
  f_drawsetstrokemiterlimit(drw_wnd, miterlimit);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetstrokeopacity f_drawsetstrokeopacity
#else
inline void x_drawsetstrokeopacity(CObjRef drw_wnd, double stroke_opacity) {
  FUNCTION_INJECTION(drawsetstrokeopacity);
  f_drawsetstrokeopacity(drw_wnd, stroke_opacity);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetstrokepatternurl f_drawsetstrokepatternurl
#else
inline bool x_drawsetstrokepatternurl(CObjRef drw_wnd, CStrRef stroke_url) {
  FUNCTION_INJECTION(drawsetstrokepatternurl);
  return f_drawsetstrokepatternurl(drw_wnd, stroke_url);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetstrokewidth f_drawsetstrokewidth
#else
inline void x_drawsetstrokewidth(CObjRef drw_wnd, double stroke_width) {
  FUNCTION_INJECTION(drawsetstrokewidth);
  f_drawsetstrokewidth(drw_wnd, stroke_width);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsettextalignment f_drawsettextalignment
#else
inline void x_drawsettextalignment(CObjRef drw_wnd, int align_type) {
  FUNCTION_INJECTION(drawsettextalignment);
  f_drawsettextalignment(drw_wnd, align_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsettextantialias f_drawsettextantialias
#else
inline void x_drawsettextantialias(CObjRef drw_wnd, bool text_antialias = true) {
  FUNCTION_INJECTION(drawsettextantialias);
  f_drawsettextantialias(drw_wnd, text_antialias);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsettextdecoration f_drawsettextdecoration
#else
inline void x_drawsettextdecoration(CObjRef drw_wnd, int decoration_type) {
  FUNCTION_INJECTION(drawsettextdecoration);
  f_drawsettextdecoration(drw_wnd, decoration_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsettextencoding f_drawsettextencoding
#else
inline void x_drawsettextencoding(CObjRef drw_wnd, CStrRef encoding) {
  FUNCTION_INJECTION(drawsettextencoding);
  f_drawsettextencoding(drw_wnd, encoding);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsettextundercolor f_drawsettextundercolor
#else
inline void x_drawsettextundercolor(CObjRef drw_wnd, CObjRef undercolor_pxl_wnd) {
  FUNCTION_INJECTION(drawsettextundercolor);
  f_drawsettextundercolor(drw_wnd, undercolor_pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetvectorgraphics f_drawsetvectorgraphics
#else
inline bool x_drawsetvectorgraphics(CObjRef drw_wnd, CStrRef vector_graphics) {
  FUNCTION_INJECTION(drawsetvectorgraphics);
  return f_drawsetvectorgraphics(drw_wnd, vector_graphics);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawsetviewbox f_drawsetviewbox
#else
inline void x_drawsetviewbox(CObjRef drw_wnd, double x1, double y1, double x2, double y2) {
  FUNCTION_INJECTION(drawsetviewbox);
  f_drawsetviewbox(drw_wnd, x1, y1, x2, y2);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawskewx f_drawskewx
#else
inline void x_drawskewx(CObjRef drw_wnd, double degrees) {
  FUNCTION_INJECTION(drawskewx);
  f_drawskewx(drw_wnd, degrees);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawskewy f_drawskewy
#else
inline void x_drawskewy(CObjRef drw_wnd, double degrees) {
  FUNCTION_INJECTION(drawskewy);
  f_drawskewy(drw_wnd, degrees);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawtranslate f_drawtranslate
#else
inline void x_drawtranslate(CObjRef drw_wnd, double x, double y) {
  FUNCTION_INJECTION(drawtranslate);
  f_drawtranslate(drw_wnd, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pushdrawingwand f_pushdrawingwand
#else
inline void x_pushdrawingwand(CObjRef drw_wnd) {
  FUNCTION_INJECTION(pushdrawingwand);
  f_pushdrawingwand(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpushclippath f_drawpushclippath
#else
inline void x_drawpushclippath(CObjRef drw_wnd, CStrRef clip_path_id) {
  FUNCTION_INJECTION(drawpushclippath);
  f_drawpushclippath(drw_wnd, clip_path_id);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpushdefs f_drawpushdefs
#else
inline void x_drawpushdefs(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawpushdefs);
  f_drawpushdefs(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpushpattern f_drawpushpattern
#else
inline void x_drawpushpattern(CObjRef drw_wnd, CStrRef pattern_id, double x, double y, double width, double height) {
  FUNCTION_INJECTION(drawpushpattern);
  f_drawpushpattern(drw_wnd, pattern_id, x, y, width, height);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_popdrawingwand f_popdrawingwand
#else
inline void x_popdrawingwand(CObjRef drw_wnd) {
  FUNCTION_INJECTION(popdrawingwand);
  f_popdrawingwand(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpopclippath f_drawpopclippath
#else
inline void x_drawpopclippath(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawpopclippath);
  f_drawpopclippath(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpopdefs f_drawpopdefs
#else
inline void x_drawpopdefs(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawpopdefs);
  f_drawpopdefs(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_drawpoppattern f_drawpoppattern
#else
inline void x_drawpoppattern(CObjRef drw_wnd) {
  FUNCTION_INJECTION(drawpoppattern);
  f_drawpoppattern(drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickadaptivethresholdimage f_magickadaptivethresholdimage
#else
inline bool x_magickadaptivethresholdimage(CObjRef mgck_wnd, double width, double height, double offset) {
  FUNCTION_INJECTION(magickadaptivethresholdimage);
  return f_magickadaptivethresholdimage(mgck_wnd, width, height, offset);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickaddimage f_magickaddimage
#else
inline bool x_magickaddimage(CObjRef mgck_wnd, CObjRef add_wand) {
  FUNCTION_INJECTION(magickaddimage);
  return f_magickaddimage(mgck_wnd, add_wand);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickaddnoiseimage f_magickaddnoiseimage
#else
inline bool x_magickaddnoiseimage(CObjRef mgck_wnd, int noise_type) {
  FUNCTION_INJECTION(magickaddnoiseimage);
  return f_magickaddnoiseimage(mgck_wnd, noise_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickaffinetransformimage f_magickaffinetransformimage
#else
inline bool x_magickaffinetransformimage(CObjRef mgck_wnd, CObjRef drw_wnd) {
  FUNCTION_INJECTION(magickaffinetransformimage);
  return f_magickaffinetransformimage(mgck_wnd, drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickannotateimage f_magickannotateimage
#else
inline bool x_magickannotateimage(CObjRef mgck_wnd, CObjRef drw_wnd, double x, double y, double angle, CStrRef text) {
  FUNCTION_INJECTION(magickannotateimage);
  return f_magickannotateimage(mgck_wnd, drw_wnd, x, y, angle, text);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickappendimages f_magickappendimages
#else
inline Object x_magickappendimages(CObjRef mgck_wnd, bool stack_vertical = false) {
  FUNCTION_INJECTION(magickappendimages);
  return f_magickappendimages(mgck_wnd, stack_vertical);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickaverageimages f_magickaverageimages
#else
inline Object x_magickaverageimages(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickaverageimages);
  return f_magickaverageimages(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickblackthresholdimage f_magickblackthresholdimage
#else
inline bool x_magickblackthresholdimage(CObjRef mgck_wnd, CObjRef threshold_pxl_wnd) {
  FUNCTION_INJECTION(magickblackthresholdimage);
  return f_magickblackthresholdimage(mgck_wnd, threshold_pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickblurimage f_magickblurimage
#else
inline bool x_magickblurimage(CObjRef mgck_wnd, double radius, double sigma, int channel_type = 0) {
  FUNCTION_INJECTION(magickblurimage);
  return f_magickblurimage(mgck_wnd, radius, sigma, channel_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickborderimage f_magickborderimage
#else
inline bool x_magickborderimage(CObjRef mgck_wnd, CObjRef bordercolor, double width, double height) {
  FUNCTION_INJECTION(magickborderimage);
  return f_magickborderimage(mgck_wnd, bordercolor, width, height);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickcharcoalimage f_magickcharcoalimage
#else
inline bool x_magickcharcoalimage(CObjRef mgck_wnd, double radius, double sigma) {
  FUNCTION_INJECTION(magickcharcoalimage);
  return f_magickcharcoalimage(mgck_wnd, radius, sigma);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickchopimage f_magickchopimage
#else
inline bool x_magickchopimage(CObjRef mgck_wnd, double width, double height, int x, int y) {
  FUNCTION_INJECTION(magickchopimage);
  return f_magickchopimage(mgck_wnd, width, height, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickclipimage f_magickclipimage
#else
inline bool x_magickclipimage(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickclipimage);
  return f_magickclipimage(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickclippathimage f_magickclippathimage
#else
inline bool x_magickclippathimage(CObjRef mgck_wnd, CStrRef pathname, bool inside) {
  FUNCTION_INJECTION(magickclippathimage);
  return f_magickclippathimage(mgck_wnd, pathname, inside);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickcoalesceimages f_magickcoalesceimages
#else
inline Object x_magickcoalesceimages(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickcoalesceimages);
  return f_magickcoalesceimages(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickcolorfloodfillimage f_magickcolorfloodfillimage
#else
inline bool x_magickcolorfloodfillimage(CObjRef mgck_wnd, CObjRef fillcolor_pxl_wnd, double fuzz, CObjRef bordercolor_pxl_wnd, int x, int y) {
  FUNCTION_INJECTION(magickcolorfloodfillimage);
  return f_magickcolorfloodfillimage(mgck_wnd, fillcolor_pxl_wnd, fuzz, bordercolor_pxl_wnd, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickcolorizeimage f_magickcolorizeimage
#else
inline bool x_magickcolorizeimage(CObjRef mgck_wnd, CObjRef colorize, CObjRef opacity_pxl_wnd) {
  FUNCTION_INJECTION(magickcolorizeimage);
  return f_magickcolorizeimage(mgck_wnd, colorize, opacity_pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickcombineimages f_magickcombineimages
#else
inline Object x_magickcombineimages(CObjRef mgck_wnd, int channel_type) {
  FUNCTION_INJECTION(magickcombineimages);
  return f_magickcombineimages(mgck_wnd, channel_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickcommentimage f_magickcommentimage
#else
inline bool x_magickcommentimage(CObjRef mgck_wnd, CStrRef comment) {
  FUNCTION_INJECTION(magickcommentimage);
  return f_magickcommentimage(mgck_wnd, comment);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickcompareimages f_magickcompareimages
#else
inline Array x_magickcompareimages(CObjRef mgck_wnd, CObjRef reference_wnd, int metric_type, int channel_type = 0) {
  FUNCTION_INJECTION(magickcompareimages);
  return f_magickcompareimages(mgck_wnd, reference_wnd, metric_type, channel_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickcompositeimage f_magickcompositeimage
#else
inline bool x_magickcompositeimage(CObjRef mgck_wnd, CObjRef composite_wnd, int composite_operator, int x, int y) {
  FUNCTION_INJECTION(magickcompositeimage);
  return f_magickcompositeimage(mgck_wnd, composite_wnd, composite_operator, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickconstituteimage f_magickconstituteimage
#else
inline bool x_magickconstituteimage(CObjRef mgck_wnd, double columns, double rows, CStrRef smap, int storage_type, CArrRef pixel_array) {
  FUNCTION_INJECTION(magickconstituteimage);
  return f_magickconstituteimage(mgck_wnd, columns, rows, smap, storage_type, pixel_array);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickcontrastimage f_magickcontrastimage
#else
inline bool x_magickcontrastimage(CObjRef mgck_wnd, bool sharpen) {
  FUNCTION_INJECTION(magickcontrastimage);
  return f_magickcontrastimage(mgck_wnd, sharpen);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickconvolveimage f_magickconvolveimage
#else
inline bool x_magickconvolveimage(CObjRef mgck_wnd, CArrRef kernel_array, int channel_type = 0) {
  FUNCTION_INJECTION(magickconvolveimage);
  return f_magickconvolveimage(mgck_wnd, kernel_array, channel_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickcropimage f_magickcropimage
#else
inline bool x_magickcropimage(CObjRef mgck_wnd, double width, double height, int x, int y) {
  FUNCTION_INJECTION(magickcropimage);
  return f_magickcropimage(mgck_wnd, width, height, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickcyclecolormapimage f_magickcyclecolormapimage
#else
inline bool x_magickcyclecolormapimage(CObjRef mgck_wnd, int num_positions) {
  FUNCTION_INJECTION(magickcyclecolormapimage);
  return f_magickcyclecolormapimage(mgck_wnd, num_positions);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickdeconstructimages f_magickdeconstructimages
#else
inline Object x_magickdeconstructimages(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickdeconstructimages);
  return f_magickdeconstructimages(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickdescribeimage f_magickdescribeimage
#else
inline String x_magickdescribeimage(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickdescribeimage);
  return f_magickdescribeimage(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickdespeckleimage f_magickdespeckleimage
#else
inline bool x_magickdespeckleimage(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickdespeckleimage);
  return f_magickdespeckleimage(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickdrawimage f_magickdrawimage
#else
inline bool x_magickdrawimage(CObjRef mgck_wnd, CObjRef drw_wnd) {
  FUNCTION_INJECTION(magickdrawimage);
  return f_magickdrawimage(mgck_wnd, drw_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickechoimageblob f_magickechoimageblob
#else
inline bool x_magickechoimageblob(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickechoimageblob);
  return f_magickechoimageblob(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickechoimagesblob f_magickechoimagesblob
#else
inline bool x_magickechoimagesblob(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickechoimagesblob);
  return f_magickechoimagesblob(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickedgeimage f_magickedgeimage
#else
inline bool x_magickedgeimage(CObjRef mgck_wnd, double radius) {
  FUNCTION_INJECTION(magickedgeimage);
  return f_magickedgeimage(mgck_wnd, radius);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickembossimage f_magickembossimage
#else
inline bool x_magickembossimage(CObjRef mgck_wnd, double radius, double sigma) {
  FUNCTION_INJECTION(magickembossimage);
  return f_magickembossimage(mgck_wnd, radius, sigma);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickenhanceimage f_magickenhanceimage
#else
inline bool x_magickenhanceimage(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickenhanceimage);
  return f_magickenhanceimage(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickequalizeimage f_magickequalizeimage
#else
inline bool x_magickequalizeimage(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickequalizeimage);
  return f_magickequalizeimage(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickevaluateimage f_magickevaluateimage
#else
inline bool x_magickevaluateimage(CObjRef mgck_wnd, int evaluate_op, double constant, int channel_type = 0) {
  FUNCTION_INJECTION(magickevaluateimage);
  return f_magickevaluateimage(mgck_wnd, evaluate_op, constant, channel_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickflattenimages f_magickflattenimages
#else
inline Object x_magickflattenimages(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickflattenimages);
  return f_magickflattenimages(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickflipimage f_magickflipimage
#else
inline bool x_magickflipimage(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickflipimage);
  return f_magickflipimage(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickflopimage f_magickflopimage
#else
inline bool x_magickflopimage(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickflopimage);
  return f_magickflopimage(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickframeimage f_magickframeimage
#else
inline bool x_magickframeimage(CObjRef mgck_wnd, CObjRef matte_color, double width, double height, int inner_bevel, int outer_bevel) {
  FUNCTION_INJECTION(magickframeimage);
  return f_magickframeimage(mgck_wnd, matte_color, width, height, inner_bevel, outer_bevel);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickfximage f_magickfximage
#else
inline Object x_magickfximage(CObjRef mgck_wnd, CStrRef expression, int channel_type = 0) {
  FUNCTION_INJECTION(magickfximage);
  return f_magickfximage(mgck_wnd, expression, channel_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgammaimage f_magickgammaimage
#else
inline bool x_magickgammaimage(CObjRef mgck_wnd, double gamma, int channel_type = 0) {
  FUNCTION_INJECTION(magickgammaimage);
  return f_magickgammaimage(mgck_wnd, gamma, channel_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgaussianblurimage f_magickgaussianblurimage
#else
inline bool x_magickgaussianblurimage(CObjRef mgck_wnd, double radius, double sigma, int channel_type = 0) {
  FUNCTION_INJECTION(magickgaussianblurimage);
  return f_magickgaussianblurimage(mgck_wnd, radius, sigma, channel_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetcharheight f_magickgetcharheight
#else
inline double x_magickgetcharheight(CObjRef mgck_wnd, CObjRef drw_wnd, CStrRef txt, bool multiline = false) {
  FUNCTION_INJECTION(magickgetcharheight);
  return f_magickgetcharheight(mgck_wnd, drw_wnd, txt, multiline);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetcharwidth f_magickgetcharwidth
#else
inline double x_magickgetcharwidth(CObjRef mgck_wnd, CObjRef drw_wnd, CStrRef txt, bool multiline = false) {
  FUNCTION_INJECTION(magickgetcharwidth);
  return f_magickgetcharwidth(mgck_wnd, drw_wnd, txt, multiline);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetexception f_magickgetexception
#else
inline Array x_magickgetexception(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetexception);
  return f_magickgetexception(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetexceptionstring f_magickgetexceptionstring
#else
inline String x_magickgetexceptionstring(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetexceptionstring);
  return f_magickgetexceptionstring(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetexceptiontype f_magickgetexceptiontype
#else
inline int x_magickgetexceptiontype(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetexceptiontype);
  return f_magickgetexceptiontype(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetfilename f_magickgetfilename
#else
inline String x_magickgetfilename(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetfilename);
  return f_magickgetfilename(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetformat f_magickgetformat
#else
inline String x_magickgetformat(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetformat);
  return f_magickgetformat(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimage f_magickgetimage
#else
inline Object x_magickgetimage(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimage);
  return f_magickgetimage(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagebackgroundcolor f_magickgetimagebackgroundcolor
#else
inline Object x_magickgetimagebackgroundcolor(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagebackgroundcolor);
  return f_magickgetimagebackgroundcolor(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimageblob f_magickgetimageblob
#else
inline String x_magickgetimageblob(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimageblob);
  return f_magickgetimageblob(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimageblueprimary f_magickgetimageblueprimary
#else
inline Array x_magickgetimageblueprimary(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimageblueprimary);
  return f_magickgetimageblueprimary(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagebordercolor f_magickgetimagebordercolor
#else
inline Object x_magickgetimagebordercolor(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagebordercolor);
  return f_magickgetimagebordercolor(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagechannelmean f_magickgetimagechannelmean
#else
inline Array x_magickgetimagechannelmean(CObjRef mgck_wnd, int channel_type) {
  FUNCTION_INJECTION(magickgetimagechannelmean);
  return f_magickgetimagechannelmean(mgck_wnd, channel_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagecolormapcolor f_magickgetimagecolormapcolor
#else
inline Object x_magickgetimagecolormapcolor(CObjRef mgck_wnd, double index) {
  FUNCTION_INJECTION(magickgetimagecolormapcolor);
  return f_magickgetimagecolormapcolor(mgck_wnd, index);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagecolors f_magickgetimagecolors
#else
inline double x_magickgetimagecolors(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagecolors);
  return f_magickgetimagecolors(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagecolorspace f_magickgetimagecolorspace
#else
inline int x_magickgetimagecolorspace(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagecolorspace);
  return f_magickgetimagecolorspace(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagecompose f_magickgetimagecompose
#else
inline int x_magickgetimagecompose(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagecompose);
  return f_magickgetimagecompose(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagecompression f_magickgetimagecompression
#else
inline int x_magickgetimagecompression(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagecompression);
  return f_magickgetimagecompression(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagecompressionquality f_magickgetimagecompressionquality
#else
inline double x_magickgetimagecompressionquality(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagecompressionquality);
  return f_magickgetimagecompressionquality(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagedelay f_magickgetimagedelay
#else
inline double x_magickgetimagedelay(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagedelay);
  return f_magickgetimagedelay(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagedepth f_magickgetimagedepth
#else
inline double x_magickgetimagedepth(CObjRef mgck_wnd, int channel_type = 0) {
  FUNCTION_INJECTION(magickgetimagedepth);
  return f_magickgetimagedepth(mgck_wnd, channel_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagedispose f_magickgetimagedispose
#else
inline int x_magickgetimagedispose(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagedispose);
  return f_magickgetimagedispose(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimageextrema f_magickgetimageextrema
#else
inline Array x_magickgetimageextrema(CObjRef mgck_wnd, int channel_type = 0) {
  FUNCTION_INJECTION(magickgetimageextrema);
  return f_magickgetimageextrema(mgck_wnd, channel_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagefilename f_magickgetimagefilename
#else
inline String x_magickgetimagefilename(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagefilename);
  return f_magickgetimagefilename(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimageformat f_magickgetimageformat
#else
inline String x_magickgetimageformat(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimageformat);
  return f_magickgetimageformat(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagegamma f_magickgetimagegamma
#else
inline double x_magickgetimagegamma(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagegamma);
  return f_magickgetimagegamma(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagegreenprimary f_magickgetimagegreenprimary
#else
inline Array x_magickgetimagegreenprimary(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagegreenprimary);
  return f_magickgetimagegreenprimary(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimageheight f_magickgetimageheight
#else
inline double x_magickgetimageheight(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimageheight);
  return f_magickgetimageheight(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagehistogram f_magickgetimagehistogram
#else
inline Array x_magickgetimagehistogram(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagehistogram);
  return f_magickgetimagehistogram(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimageindex f_magickgetimageindex
#else
inline int x_magickgetimageindex(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimageindex);
  return f_magickgetimageindex(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimageinterlacescheme f_magickgetimageinterlacescheme
#else
inline int x_magickgetimageinterlacescheme(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimageinterlacescheme);
  return f_magickgetimageinterlacescheme(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimageiterations f_magickgetimageiterations
#else
inline double x_magickgetimageiterations(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimageiterations);
  return f_magickgetimageiterations(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagemattecolor f_magickgetimagemattecolor
#else
inline Object x_magickgetimagemattecolor(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagemattecolor);
  return f_magickgetimagemattecolor(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagemimetype f_magickgetimagemimetype
#else
inline String x_magickgetimagemimetype(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagemimetype);
  return f_magickgetimagemimetype(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagepixels f_magickgetimagepixels
#else
inline Array x_magickgetimagepixels(CObjRef mgck_wnd, int x_offset, int y_offset, double columns, double rows, CStrRef smap, int storage_type) {
  FUNCTION_INJECTION(magickgetimagepixels);
  return f_magickgetimagepixels(mgck_wnd, x_offset, y_offset, columns, rows, smap, storage_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimageprofile f_magickgetimageprofile
#else
inline String x_magickgetimageprofile(CObjRef mgck_wnd, CStrRef name) {
  FUNCTION_INJECTION(magickgetimageprofile);
  return f_magickgetimageprofile(mgck_wnd, name);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimageredprimary f_magickgetimageredprimary
#else
inline Array x_magickgetimageredprimary(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimageredprimary);
  return f_magickgetimageredprimary(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagerenderingintent f_magickgetimagerenderingintent
#else
inline int x_magickgetimagerenderingintent(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagerenderingintent);
  return f_magickgetimagerenderingintent(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimageresolution f_magickgetimageresolution
#else
inline Array x_magickgetimageresolution(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimageresolution);
  return f_magickgetimageresolution(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagescene f_magickgetimagescene
#else
inline double x_magickgetimagescene(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagescene);
  return f_magickgetimagescene(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagesignature f_magickgetimagesignature
#else
inline String x_magickgetimagesignature(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagesignature);
  return f_magickgetimagesignature(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagesize f_magickgetimagesize
#else
inline int x_magickgetimagesize(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagesize);
  return f_magickgetimagesize(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagetype f_magickgetimagetype
#else
inline int x_magickgetimagetype(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagetype);
  return f_magickgetimagetype(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimageunits f_magickgetimageunits
#else
inline int x_magickgetimageunits(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimageunits);
  return f_magickgetimageunits(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagevirtualpixelmethod f_magickgetimagevirtualpixelmethod
#else
inline int x_magickgetimagevirtualpixelmethod(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagevirtualpixelmethod);
  return f_magickgetimagevirtualpixelmethod(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagewhitepoint f_magickgetimagewhitepoint
#else
inline Array x_magickgetimagewhitepoint(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagewhitepoint);
  return f_magickgetimagewhitepoint(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagewidth f_magickgetimagewidth
#else
inline double x_magickgetimagewidth(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagewidth);
  return f_magickgetimagewidth(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetimagesblob f_magickgetimagesblob
#else
inline String x_magickgetimagesblob(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetimagesblob);
  return f_magickgetimagesblob(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetinterlacescheme f_magickgetinterlacescheme
#else
inline int x_magickgetinterlacescheme(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetinterlacescheme);
  return f_magickgetinterlacescheme(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetmaxtextadvance f_magickgetmaxtextadvance
#else
inline double x_magickgetmaxtextadvance(CObjRef mgck_wnd, CObjRef drw_wnd, CStrRef txt, bool multiline = false) {
  FUNCTION_INJECTION(magickgetmaxtextadvance);
  return f_magickgetmaxtextadvance(mgck_wnd, drw_wnd, txt, multiline);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetmimetype f_magickgetmimetype
#else
inline String x_magickgetmimetype(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetmimetype);
  return f_magickgetmimetype(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetnumberimages f_magickgetnumberimages
#else
inline double x_magickgetnumberimages(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetnumberimages);
  return f_magickgetnumberimages(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetsamplingfactors f_magickgetsamplingfactors
#else
inline Array x_magickgetsamplingfactors(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetsamplingfactors);
  return f_magickgetsamplingfactors(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetsize f_magickgetsize
#else
inline Array x_magickgetsize(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetsize);
  return f_magickgetsize(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetstringheight f_magickgetstringheight
#else
inline double x_magickgetstringheight(CObjRef mgck_wnd, CObjRef drw_wnd, CStrRef txt, bool multiline = false) {
  FUNCTION_INJECTION(magickgetstringheight);
  return f_magickgetstringheight(mgck_wnd, drw_wnd, txt, multiline);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetstringwidth f_magickgetstringwidth
#else
inline double x_magickgetstringwidth(CObjRef mgck_wnd, CObjRef drw_wnd, CStrRef txt, bool multiline = false) {
  FUNCTION_INJECTION(magickgetstringwidth);
  return f_magickgetstringwidth(mgck_wnd, drw_wnd, txt, multiline);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgettextascent f_magickgettextascent
#else
inline double x_magickgettextascent(CObjRef mgck_wnd, CObjRef drw_wnd, CStrRef txt, bool multiline = false) {
  FUNCTION_INJECTION(magickgettextascent);
  return f_magickgettextascent(mgck_wnd, drw_wnd, txt, multiline);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgettextdescent f_magickgettextdescent
#else
inline double x_magickgettextdescent(CObjRef mgck_wnd, CObjRef drw_wnd, CStrRef txt, bool multiline = false) {
  FUNCTION_INJECTION(magickgettextdescent);
  return f_magickgettextdescent(mgck_wnd, drw_wnd, txt, multiline);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickgetwandsize f_magickgetwandsize
#else
inline Array x_magickgetwandsize(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickgetwandsize);
  return f_magickgetwandsize(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickhasnextimage f_magickhasnextimage
#else
inline bool x_magickhasnextimage(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickhasnextimage);
  return f_magickhasnextimage(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickhaspreviousimage f_magickhaspreviousimage
#else
inline bool x_magickhaspreviousimage(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickhaspreviousimage);
  return f_magickhaspreviousimage(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickimplodeimage f_magickimplodeimage
#else
inline bool x_magickimplodeimage(CObjRef mgck_wnd, double amount) {
  FUNCTION_INJECTION(magickimplodeimage);
  return f_magickimplodeimage(mgck_wnd, amount);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicklabelimage f_magicklabelimage
#else
inline bool x_magicklabelimage(CObjRef mgck_wnd, CStrRef label) {
  FUNCTION_INJECTION(magicklabelimage);
  return f_magicklabelimage(mgck_wnd, label);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicklevelimage f_magicklevelimage
#else
inline bool x_magicklevelimage(CObjRef mgck_wnd, double black_point, double gamma, double white_point, int channel_type = 0) {
  FUNCTION_INJECTION(magicklevelimage);
  return f_magicklevelimage(mgck_wnd, black_point, gamma, white_point, channel_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickmagnifyimage f_magickmagnifyimage
#else
inline bool x_magickmagnifyimage(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickmagnifyimage);
  return f_magickmagnifyimage(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickmapimage f_magickmapimage
#else
inline bool x_magickmapimage(CObjRef mgck_wnd, CObjRef map_wand, bool dither) {
  FUNCTION_INJECTION(magickmapimage);
  return f_magickmapimage(mgck_wnd, map_wand, dither);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickmattefloodfillimage f_magickmattefloodfillimage
#else
inline bool x_magickmattefloodfillimage(CObjRef mgck_wnd, double opacity, double fuzz, CObjRef bordercolor_pxl_wnd, int x, int y) {
  FUNCTION_INJECTION(magickmattefloodfillimage);
  return f_magickmattefloodfillimage(mgck_wnd, opacity, fuzz, bordercolor_pxl_wnd, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickmedianfilterimage f_magickmedianfilterimage
#else
inline bool x_magickmedianfilterimage(CObjRef mgck_wnd, double radius) {
  FUNCTION_INJECTION(magickmedianfilterimage);
  return f_magickmedianfilterimage(mgck_wnd, radius);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickminifyimage f_magickminifyimage
#else
inline bool x_magickminifyimage(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickminifyimage);
  return f_magickminifyimage(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickmodulateimage f_magickmodulateimage
#else
inline bool x_magickmodulateimage(CObjRef mgck_wnd, double brightness, double saturation, double hue) {
  FUNCTION_INJECTION(magickmodulateimage);
  return f_magickmodulateimage(mgck_wnd, brightness, saturation, hue);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickmontageimage f_magickmontageimage
#else
inline Object x_magickmontageimage(CObjRef mgck_wnd, CObjRef drw_wnd, CStrRef tile_geometry, CStrRef thumbnail_geometry, int montage_mode, CStrRef frame) {
  FUNCTION_INJECTION(magickmontageimage);
  return f_magickmontageimage(mgck_wnd, drw_wnd, tile_geometry, thumbnail_geometry, montage_mode, frame);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickmorphimages f_magickmorphimages
#else
inline Object x_magickmorphimages(CObjRef mgck_wnd, double number_frames) {
  FUNCTION_INJECTION(magickmorphimages);
  return f_magickmorphimages(mgck_wnd, number_frames);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickmosaicimages f_magickmosaicimages
#else
inline Object x_magickmosaicimages(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickmosaicimages);
  return f_magickmosaicimages(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickmotionblurimage f_magickmotionblurimage
#else
inline bool x_magickmotionblurimage(CObjRef mgck_wnd, double radius, double sigma, double angle) {
  FUNCTION_INJECTION(magickmotionblurimage);
  return f_magickmotionblurimage(mgck_wnd, radius, sigma, angle);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicknegateimage f_magicknegateimage
#else
inline bool x_magicknegateimage(CObjRef mgck_wnd, bool only_the_gray = false, int channel_type = 0) {
  FUNCTION_INJECTION(magicknegateimage);
  return f_magicknegateimage(mgck_wnd, only_the_gray, channel_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicknewimage f_magicknewimage
#else
inline bool x_magicknewimage(CObjRef mgck_wnd, double width, double height, CStrRef imagemagick_col_str = null_string) {
  FUNCTION_INJECTION(magicknewimage);
  return f_magicknewimage(mgck_wnd, width, height, imagemagick_col_str);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicknextimage f_magicknextimage
#else
inline bool x_magicknextimage(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magicknextimage);
  return f_magicknextimage(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicknormalizeimage f_magicknormalizeimage
#else
inline bool x_magicknormalizeimage(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magicknormalizeimage);
  return f_magicknormalizeimage(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickoilpaintimage f_magickoilpaintimage
#else
inline bool x_magickoilpaintimage(CObjRef mgck_wnd, double radius) {
  FUNCTION_INJECTION(magickoilpaintimage);
  return f_magickoilpaintimage(mgck_wnd, radius);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickpaintopaqueimage f_magickpaintopaqueimage
#else
inline bool x_magickpaintopaqueimage(CObjRef mgck_wnd, CObjRef target_pxl_wnd, CObjRef fill_pxl_wnd, double fuzz = 0.0) {
  FUNCTION_INJECTION(magickpaintopaqueimage);
  return f_magickpaintopaqueimage(mgck_wnd, target_pxl_wnd, fill_pxl_wnd, fuzz);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickpainttransparentimage f_magickpainttransparentimage
#else
inline bool x_magickpainttransparentimage(CObjRef mgck_wnd, CObjRef target, double opacity = k_MW_TransparentOpacity, double fuzz = 0.0) {
  FUNCTION_INJECTION(magickpainttransparentimage);
  return f_magickpainttransparentimage(mgck_wnd, target, opacity, fuzz);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickpingimage f_magickpingimage
#else
inline bool x_magickpingimage(CObjRef mgck_wnd, CStrRef filename) {
  FUNCTION_INJECTION(magickpingimage);
  return f_magickpingimage(mgck_wnd, filename);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickposterizeimage f_magickposterizeimage
#else
inline bool x_magickposterizeimage(CObjRef mgck_wnd, double levels, bool dither) {
  FUNCTION_INJECTION(magickposterizeimage);
  return f_magickposterizeimage(mgck_wnd, levels, dither);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickpreviewimages f_magickpreviewimages
#else
inline Object x_magickpreviewimages(CObjRef mgck_wnd, int preview) {
  FUNCTION_INJECTION(magickpreviewimages);
  return f_magickpreviewimages(mgck_wnd, preview);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickpreviousimage f_magickpreviousimage
#else
inline bool x_magickpreviousimage(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickpreviousimage);
  return f_magickpreviousimage(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickprofileimage f_magickprofileimage
#else
inline bool x_magickprofileimage(CObjRef mgck_wnd, CStrRef name, CStrRef profile = null_string) {
  FUNCTION_INJECTION(magickprofileimage);
  return f_magickprofileimage(mgck_wnd, name, profile);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickquantizeimage f_magickquantizeimage
#else
inline bool x_magickquantizeimage(CObjRef mgck_wnd, double number_colors, int colorspace_type, double treedepth, bool dither, bool measure_error) {
  FUNCTION_INJECTION(magickquantizeimage);
  return f_magickquantizeimage(mgck_wnd, number_colors, colorspace_type, treedepth, dither, measure_error);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickquantizeimages f_magickquantizeimages
#else
inline bool x_magickquantizeimages(CObjRef mgck_wnd, double number_colors, int colorspace_type, double treedepth, bool dither, bool measure_error) {
  FUNCTION_INJECTION(magickquantizeimages);
  return f_magickquantizeimages(mgck_wnd, number_colors, colorspace_type, treedepth, dither, measure_error);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickqueryfontmetrics f_magickqueryfontmetrics
#else
inline Array x_magickqueryfontmetrics(CObjRef mgck_wnd, CObjRef drw_wnd, CStrRef txt, bool multiline = false) {
  FUNCTION_INJECTION(magickqueryfontmetrics);
  return f_magickqueryfontmetrics(mgck_wnd, drw_wnd, txt, multiline);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickradialblurimage f_magickradialblurimage
#else
inline bool x_magickradialblurimage(CObjRef mgck_wnd, double angle) {
  FUNCTION_INJECTION(magickradialblurimage);
  return f_magickradialblurimage(mgck_wnd, angle);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickraiseimage f_magickraiseimage
#else
inline bool x_magickraiseimage(CObjRef mgck_wnd, double width, double height, int x, int y, bool raise) {
  FUNCTION_INJECTION(magickraiseimage);
  return f_magickraiseimage(mgck_wnd, width, height, x, y, raise);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickreadimage f_magickreadimage
#else
inline bool x_magickreadimage(CObjRef mgck_wnd, CStrRef filename) {
  FUNCTION_INJECTION(magickreadimage);
  return f_magickreadimage(mgck_wnd, filename);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickreadimageblob f_magickreadimageblob
#else
inline bool x_magickreadimageblob(CObjRef mgck_wnd, CStrRef blob) {
  FUNCTION_INJECTION(magickreadimageblob);
  return f_magickreadimageblob(mgck_wnd, blob);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickreadimagefile f_magickreadimagefile
#else
inline bool x_magickreadimagefile(CObjRef mgck_wnd, CObjRef handle) {
  FUNCTION_INJECTION(magickreadimagefile);
  return f_magickreadimagefile(mgck_wnd, handle);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickreadimages f_magickreadimages
#else
inline bool x_magickreadimages(CObjRef mgck_wnd, CArrRef img_filenames_array) {
  FUNCTION_INJECTION(magickreadimages);
  return f_magickreadimages(mgck_wnd, img_filenames_array);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickreducenoiseimage f_magickreducenoiseimage
#else
inline bool x_magickreducenoiseimage(CObjRef mgck_wnd, double radius) {
  FUNCTION_INJECTION(magickreducenoiseimage);
  return f_magickreducenoiseimage(mgck_wnd, radius);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickremoveimage f_magickremoveimage
#else
inline bool x_magickremoveimage(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickremoveimage);
  return f_magickremoveimage(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickremoveimageprofile f_magickremoveimageprofile
#else
inline String x_magickremoveimageprofile(CObjRef mgck_wnd, CStrRef name) {
  FUNCTION_INJECTION(magickremoveimageprofile);
  return f_magickremoveimageprofile(mgck_wnd, name);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickremoveimageprofiles f_magickremoveimageprofiles
#else
inline bool x_magickremoveimageprofiles(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickremoveimageprofiles);
  return f_magickremoveimageprofiles(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickresampleimage f_magickresampleimage
#else
inline bool x_magickresampleimage(CObjRef mgck_wnd, double x_resolution, double y_resolution, int filter_type, double blur) {
  FUNCTION_INJECTION(magickresampleimage);
  return f_magickresampleimage(mgck_wnd, x_resolution, y_resolution, filter_type, blur);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickresetiterator f_magickresetiterator
#else
inline void x_magickresetiterator(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickresetiterator);
  f_magickresetiterator(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickresizeimage f_magickresizeimage
#else
inline bool x_magickresizeimage(CObjRef mgck_wnd, double columns, double rows, int filter_type, double blur) {
  FUNCTION_INJECTION(magickresizeimage);
  return f_magickresizeimage(mgck_wnd, columns, rows, filter_type, blur);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickrollimage f_magickrollimage
#else
inline bool x_magickrollimage(CObjRef mgck_wnd, int x_offset, int y_offset) {
  FUNCTION_INJECTION(magickrollimage);
  return f_magickrollimage(mgck_wnd, x_offset, y_offset);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickrotateimage f_magickrotateimage
#else
inline bool x_magickrotateimage(CObjRef mgck_wnd, CObjRef background, double degrees) {
  FUNCTION_INJECTION(magickrotateimage);
  return f_magickrotateimage(mgck_wnd, background, degrees);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksampleimage f_magicksampleimage
#else
inline bool x_magicksampleimage(CObjRef mgck_wnd, double columns, double rows) {
  FUNCTION_INJECTION(magicksampleimage);
  return f_magicksampleimage(mgck_wnd, columns, rows);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickscaleimage f_magickscaleimage
#else
inline bool x_magickscaleimage(CObjRef mgck_wnd, double columns, double rows) {
  FUNCTION_INJECTION(magickscaleimage);
  return f_magickscaleimage(mgck_wnd, columns, rows);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickseparateimagechannel f_magickseparateimagechannel
#else
inline bool x_magickseparateimagechannel(CObjRef mgck_wnd, int channel_type) {
  FUNCTION_INJECTION(magickseparateimagechannel);
  return f_magickseparateimagechannel(mgck_wnd, channel_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetcompressionquality f_magicksetcompressionquality
#else
inline bool x_magicksetcompressionquality(CObjRef mgck_wnd, double quality) {
  FUNCTION_INJECTION(magicksetcompressionquality);
  return f_magicksetcompressionquality(mgck_wnd, quality);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetfilename f_magicksetfilename
#else
inline bool x_magicksetfilename(CObjRef mgck_wnd, CStrRef filename = null_string) {
  FUNCTION_INJECTION(magicksetfilename);
  return f_magicksetfilename(mgck_wnd, filename);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetfirstiterator f_magicksetfirstiterator
#else
inline void x_magicksetfirstiterator(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magicksetfirstiterator);
  f_magicksetfirstiterator(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetformat f_magicksetformat
#else
inline bool x_magicksetformat(CObjRef mgck_wnd, CStrRef format) {
  FUNCTION_INJECTION(magicksetformat);
  return f_magicksetformat(mgck_wnd, format);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimage f_magicksetimage
#else
inline bool x_magicksetimage(CObjRef mgck_wnd, CObjRef replace_wand) {
  FUNCTION_INJECTION(magicksetimage);
  return f_magicksetimage(mgck_wnd, replace_wand);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimagebackgroundcolor f_magicksetimagebackgroundcolor
#else
inline bool x_magicksetimagebackgroundcolor(CObjRef mgck_wnd, CObjRef background_pxl_wnd) {
  FUNCTION_INJECTION(magicksetimagebackgroundcolor);
  return f_magicksetimagebackgroundcolor(mgck_wnd, background_pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimagebias f_magicksetimagebias
#else
inline bool x_magicksetimagebias(CObjRef mgck_wnd, double bias) {
  FUNCTION_INJECTION(magicksetimagebias);
  return f_magicksetimagebias(mgck_wnd, bias);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimageblueprimary f_magicksetimageblueprimary
#else
inline bool x_magicksetimageblueprimary(CObjRef mgck_wnd, double x, double y) {
  FUNCTION_INJECTION(magicksetimageblueprimary);
  return f_magicksetimageblueprimary(mgck_wnd, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimagebordercolor f_magicksetimagebordercolor
#else
inline bool x_magicksetimagebordercolor(CObjRef mgck_wnd, CObjRef border_pxl_wnd) {
  FUNCTION_INJECTION(magicksetimagebordercolor);
  return f_magicksetimagebordercolor(mgck_wnd, border_pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimagecolormapcolor f_magicksetimagecolormapcolor
#else
inline bool x_magicksetimagecolormapcolor(CObjRef mgck_wnd, double index, CObjRef mapcolor_pxl_wnd) {
  FUNCTION_INJECTION(magicksetimagecolormapcolor);
  return f_magicksetimagecolormapcolor(mgck_wnd, index, mapcolor_pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimagecolorspace f_magicksetimagecolorspace
#else
inline bool x_magicksetimagecolorspace(CObjRef mgck_wnd, int colorspace_type) {
  FUNCTION_INJECTION(magicksetimagecolorspace);
  return f_magicksetimagecolorspace(mgck_wnd, colorspace_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimagecompose f_magicksetimagecompose
#else
inline bool x_magicksetimagecompose(CObjRef mgck_wnd, int composite_operator) {
  FUNCTION_INJECTION(magicksetimagecompose);
  return f_magicksetimagecompose(mgck_wnd, composite_operator);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimagecompression f_magicksetimagecompression
#else
inline bool x_magicksetimagecompression(CObjRef mgck_wnd, int compression_type) {
  FUNCTION_INJECTION(magicksetimagecompression);
  return f_magicksetimagecompression(mgck_wnd, compression_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimagecompressionquality f_magicksetimagecompressionquality
#else
inline bool x_magicksetimagecompressionquality(CObjRef mgck_wnd, double quality) {
  FUNCTION_INJECTION(magicksetimagecompressionquality);
  return f_magicksetimagecompressionquality(mgck_wnd, quality);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimagedelay f_magicksetimagedelay
#else
inline bool x_magicksetimagedelay(CObjRef mgck_wnd, double delay) {
  FUNCTION_INJECTION(magicksetimagedelay);
  return f_magicksetimagedelay(mgck_wnd, delay);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimagedepth f_magicksetimagedepth
#else
inline bool x_magicksetimagedepth(CObjRef mgck_wnd, int depth, int channel_type = 0) {
  FUNCTION_INJECTION(magicksetimagedepth);
  return f_magicksetimagedepth(mgck_wnd, depth, channel_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimagedispose f_magicksetimagedispose
#else
inline bool x_magicksetimagedispose(CObjRef mgck_wnd, int dispose_type) {
  FUNCTION_INJECTION(magicksetimagedispose);
  return f_magicksetimagedispose(mgck_wnd, dispose_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimagefilename f_magicksetimagefilename
#else
inline bool x_magicksetimagefilename(CObjRef mgck_wnd, CStrRef filename = null_string) {
  FUNCTION_INJECTION(magicksetimagefilename);
  return f_magicksetimagefilename(mgck_wnd, filename);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimageformat f_magicksetimageformat
#else
inline bool x_magicksetimageformat(CObjRef mgck_wnd, CStrRef format) {
  FUNCTION_INJECTION(magicksetimageformat);
  return f_magicksetimageformat(mgck_wnd, format);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimagegamma f_magicksetimagegamma
#else
inline bool x_magicksetimagegamma(CObjRef mgck_wnd, double gamma) {
  FUNCTION_INJECTION(magicksetimagegamma);
  return f_magicksetimagegamma(mgck_wnd, gamma);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimagegreenprimary f_magicksetimagegreenprimary
#else
inline bool x_magicksetimagegreenprimary(CObjRef mgck_wnd, double x, double y) {
  FUNCTION_INJECTION(magicksetimagegreenprimary);
  return f_magicksetimagegreenprimary(mgck_wnd, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimageindex f_magicksetimageindex
#else
inline bool x_magicksetimageindex(CObjRef mgck_wnd, int index) {
  FUNCTION_INJECTION(magicksetimageindex);
  return f_magicksetimageindex(mgck_wnd, index);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimageinterlacescheme f_magicksetimageinterlacescheme
#else
inline bool x_magicksetimageinterlacescheme(CObjRef mgck_wnd, int interlace_type) {
  FUNCTION_INJECTION(magicksetimageinterlacescheme);
  return f_magicksetimageinterlacescheme(mgck_wnd, interlace_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimageiterations f_magicksetimageiterations
#else
inline bool x_magicksetimageiterations(CObjRef mgck_wnd, double iterations) {
  FUNCTION_INJECTION(magicksetimageiterations);
  return f_magicksetimageiterations(mgck_wnd, iterations);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimagemattecolor f_magicksetimagemattecolor
#else
inline bool x_magicksetimagemattecolor(CObjRef mgck_wnd, CObjRef matte_pxl_wnd) {
  FUNCTION_INJECTION(magicksetimagemattecolor);
  return f_magicksetimagemattecolor(mgck_wnd, matte_pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimageoption f_magicksetimageoption
#else
inline bool x_magicksetimageoption(CObjRef mgck_wnd, CStrRef format, CStrRef key, CStrRef value) {
  FUNCTION_INJECTION(magicksetimageoption);
  return f_magicksetimageoption(mgck_wnd, format, key, value);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimagepixels f_magicksetimagepixels
#else
inline bool x_magicksetimagepixels(CObjRef mgck_wnd, int x_offset, int y_offset, double columns, double rows, CStrRef smap, int storage_type, CArrRef pixel_array) {
  FUNCTION_INJECTION(magicksetimagepixels);
  return f_magicksetimagepixels(mgck_wnd, x_offset, y_offset, columns, rows, smap, storage_type, pixel_array);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimageprofile f_magicksetimageprofile
#else
inline bool x_magicksetimageprofile(CObjRef mgck_wnd, CStrRef name, CStrRef profile) {
  FUNCTION_INJECTION(magicksetimageprofile);
  return f_magicksetimageprofile(mgck_wnd, name, profile);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimageredprimary f_magicksetimageredprimary
#else
inline bool x_magicksetimageredprimary(CObjRef mgck_wnd, double x, double y) {
  FUNCTION_INJECTION(magicksetimageredprimary);
  return f_magicksetimageredprimary(mgck_wnd, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimagerenderingintent f_magicksetimagerenderingintent
#else
inline bool x_magicksetimagerenderingintent(CObjRef mgck_wnd, int rendering_intent) {
  FUNCTION_INJECTION(magicksetimagerenderingintent);
  return f_magicksetimagerenderingintent(mgck_wnd, rendering_intent);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimageresolution f_magicksetimageresolution
#else
inline bool x_magicksetimageresolution(CObjRef mgck_wnd, double x_resolution, double y_resolution) {
  FUNCTION_INJECTION(magicksetimageresolution);
  return f_magicksetimageresolution(mgck_wnd, x_resolution, y_resolution);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimagescene f_magicksetimagescene
#else
inline bool x_magicksetimagescene(CObjRef mgck_wnd, double scene) {
  FUNCTION_INJECTION(magicksetimagescene);
  return f_magicksetimagescene(mgck_wnd, scene);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimagetype f_magicksetimagetype
#else
inline bool x_magicksetimagetype(CObjRef mgck_wnd, int image_type) {
  FUNCTION_INJECTION(magicksetimagetype);
  return f_magicksetimagetype(mgck_wnd, image_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimageunits f_magicksetimageunits
#else
inline bool x_magicksetimageunits(CObjRef mgck_wnd, int resolution_type) {
  FUNCTION_INJECTION(magicksetimageunits);
  return f_magicksetimageunits(mgck_wnd, resolution_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimagevirtualpixelmethod f_magicksetimagevirtualpixelmethod
#else
inline bool x_magicksetimagevirtualpixelmethod(CObjRef mgck_wnd, int virtual_pixel_method) {
  FUNCTION_INJECTION(magicksetimagevirtualpixelmethod);
  return f_magicksetimagevirtualpixelmethod(mgck_wnd, virtual_pixel_method);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetimagewhitepoint f_magicksetimagewhitepoint
#else
inline bool x_magicksetimagewhitepoint(CObjRef mgck_wnd, double x, double y) {
  FUNCTION_INJECTION(magicksetimagewhitepoint);
  return f_magicksetimagewhitepoint(mgck_wnd, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetinterlacescheme f_magicksetinterlacescheme
#else
inline bool x_magicksetinterlacescheme(CObjRef mgck_wnd, int interlace_type) {
  FUNCTION_INJECTION(magicksetinterlacescheme);
  return f_magicksetinterlacescheme(mgck_wnd, interlace_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetlastiterator f_magicksetlastiterator
#else
inline void x_magicksetlastiterator(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magicksetlastiterator);
  f_magicksetlastiterator(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetpassphrase f_magicksetpassphrase
#else
inline bool x_magicksetpassphrase(CObjRef mgck_wnd, CStrRef passphrase) {
  FUNCTION_INJECTION(magicksetpassphrase);
  return f_magicksetpassphrase(mgck_wnd, passphrase);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetresolution f_magicksetresolution
#else
inline bool x_magicksetresolution(CObjRef mgck_wnd, double x_resolution, double y_resolution) {
  FUNCTION_INJECTION(magicksetresolution);
  return f_magicksetresolution(mgck_wnd, x_resolution, y_resolution);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetsamplingfactors f_magicksetsamplingfactors
#else
inline bool x_magicksetsamplingfactors(CObjRef mgck_wnd, double number_factors, CArrRef sampling_factors) {
  FUNCTION_INJECTION(magicksetsamplingfactors);
  return f_magicksetsamplingfactors(mgck_wnd, number_factors, sampling_factors);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetsize f_magicksetsize
#else
inline bool x_magicksetsize(CObjRef mgck_wnd, int columns, int rows) {
  FUNCTION_INJECTION(magicksetsize);
  return f_magicksetsize(mgck_wnd, columns, rows);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksetwandsize f_magicksetwandsize
#else
inline bool x_magicksetwandsize(CObjRef mgck_wnd, int columns, int rows) {
  FUNCTION_INJECTION(magicksetwandsize);
  return f_magicksetwandsize(mgck_wnd, columns, rows);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksharpenimage f_magicksharpenimage
#else
inline bool x_magicksharpenimage(CObjRef mgck_wnd, double radius, double sigma, int channel_type = 0) {
  FUNCTION_INJECTION(magicksharpenimage);
  return f_magicksharpenimage(mgck_wnd, radius, sigma, channel_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickshaveimage f_magickshaveimage
#else
inline bool x_magickshaveimage(CObjRef mgck_wnd, int columns, int rows) {
  FUNCTION_INJECTION(magickshaveimage);
  return f_magickshaveimage(mgck_wnd, columns, rows);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickshearimage f_magickshearimage
#else
inline bool x_magickshearimage(CObjRef mgck_wnd, CObjRef background, double x_shear, double y_shear) {
  FUNCTION_INJECTION(magickshearimage);
  return f_magickshearimage(mgck_wnd, background, x_shear, y_shear);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksolarizeimage f_magicksolarizeimage
#else
inline bool x_magicksolarizeimage(CObjRef mgck_wnd, double threshold) {
  FUNCTION_INJECTION(magicksolarizeimage);
  return f_magicksolarizeimage(mgck_wnd, threshold);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickspliceimage f_magickspliceimage
#else
inline bool x_magickspliceimage(CObjRef mgck_wnd, double width, double height, int x, int y) {
  FUNCTION_INJECTION(magickspliceimage);
  return f_magickspliceimage(mgck_wnd, width, height, x, y);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickspreadimage f_magickspreadimage
#else
inline bool x_magickspreadimage(CObjRef mgck_wnd, double radius) {
  FUNCTION_INJECTION(magickspreadimage);
  return f_magickspreadimage(mgck_wnd, radius);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicksteganoimage f_magicksteganoimage
#else
inline Object x_magicksteganoimage(CObjRef mgck_wnd, CObjRef watermark_wand, int offset) {
  FUNCTION_INJECTION(magicksteganoimage);
  return f_magicksteganoimage(mgck_wnd, watermark_wand, offset);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickstereoimage f_magickstereoimage
#else
inline bool x_magickstereoimage(CObjRef mgck_wnd, CObjRef offset_wand) {
  FUNCTION_INJECTION(magickstereoimage);
  return f_magickstereoimage(mgck_wnd, offset_wand);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickstripimage f_magickstripimage
#else
inline bool x_magickstripimage(CObjRef mgck_wnd) {
  FUNCTION_INJECTION(magickstripimage);
  return f_magickstripimage(mgck_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickswirlimage f_magickswirlimage
#else
inline bool x_magickswirlimage(CObjRef mgck_wnd, double degrees) {
  FUNCTION_INJECTION(magickswirlimage);
  return f_magickswirlimage(mgck_wnd, degrees);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicktextureimage f_magicktextureimage
#else
inline Object x_magicktextureimage(CObjRef mgck_wnd, CObjRef texture_wand) {
  FUNCTION_INJECTION(magicktextureimage);
  return f_magicktextureimage(mgck_wnd, texture_wand);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickthresholdimage f_magickthresholdimage
#else
inline bool x_magickthresholdimage(CObjRef mgck_wnd, double threshold, int channel_type = 0) {
  FUNCTION_INJECTION(magickthresholdimage);
  return f_magickthresholdimage(mgck_wnd, threshold, channel_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicktintimage f_magicktintimage
#else
inline bool x_magicktintimage(CObjRef mgck_wnd, int tint_pxl_wnd, CObjRef opacity_pxl_wnd) {
  FUNCTION_INJECTION(magicktintimage);
  return f_magicktintimage(mgck_wnd, tint_pxl_wnd, opacity_pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicktransformimage f_magicktransformimage
#else
inline Object x_magicktransformimage(CObjRef mgck_wnd, CStrRef crop, CStrRef geometry) {
  FUNCTION_INJECTION(magicktransformimage);
  return f_magicktransformimage(mgck_wnd, crop, geometry);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magicktrimimage f_magicktrimimage
#else
inline bool x_magicktrimimage(CObjRef mgck_wnd, double fuzz) {
  FUNCTION_INJECTION(magicktrimimage);
  return f_magicktrimimage(mgck_wnd, fuzz);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickunsharpmaskimage f_magickunsharpmaskimage
#else
inline bool x_magickunsharpmaskimage(CObjRef mgck_wnd, double radius, double sigma, double amount, double threshold, int channel_type = 0) {
  FUNCTION_INJECTION(magickunsharpmaskimage);
  return f_magickunsharpmaskimage(mgck_wnd, radius, sigma, amount, threshold, channel_type);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickwaveimage f_magickwaveimage
#else
inline bool x_magickwaveimage(CObjRef mgck_wnd, double amplitude, double wave_length) {
  FUNCTION_INJECTION(magickwaveimage);
  return f_magickwaveimage(mgck_wnd, amplitude, wave_length);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickwhitethresholdimage f_magickwhitethresholdimage
#else
inline bool x_magickwhitethresholdimage(CObjRef mgck_wnd, CObjRef threshold_pxl_wnd) {
  FUNCTION_INJECTION(magickwhitethresholdimage);
  return f_magickwhitethresholdimage(mgck_wnd, threshold_pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickwriteimage f_magickwriteimage
#else
inline bool x_magickwriteimage(CObjRef mgck_wnd, CStrRef filename) {
  FUNCTION_INJECTION(magickwriteimage);
  return f_magickwriteimage(mgck_wnd, filename);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickwriteimagefile f_magickwriteimagefile
#else
inline bool x_magickwriteimagefile(CObjRef mgck_wnd, CObjRef handle) {
  FUNCTION_INJECTION(magickwriteimagefile);
  return f_magickwriteimagefile(mgck_wnd, handle);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickwriteimages f_magickwriteimages
#else
inline bool x_magickwriteimages(CObjRef mgck_wnd, CStrRef filename = "", bool join_images = false) {
  FUNCTION_INJECTION(magickwriteimages);
  return f_magickwriteimages(mgck_wnd, filename, join_images);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_magickwriteimagesfile f_magickwriteimagesfile
#else
inline bool x_magickwriteimagesfile(CObjRef mgck_wnd, CObjRef handle) {
  FUNCTION_INJECTION(magickwriteimagesfile);
  return f_magickwriteimagesfile(mgck_wnd, handle);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetalpha f_pixelgetalpha
#else
inline double x_pixelgetalpha(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetalpha);
  return f_pixelgetalpha(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetalphaquantum f_pixelgetalphaquantum
#else
inline double x_pixelgetalphaquantum(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetalphaquantum);
  return f_pixelgetalphaquantum(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetblack f_pixelgetblack
#else
inline double x_pixelgetblack(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetblack);
  return f_pixelgetblack(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetblackquantum f_pixelgetblackquantum
#else
inline double x_pixelgetblackquantum(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetblackquantum);
  return f_pixelgetblackquantum(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetblue f_pixelgetblue
#else
inline double x_pixelgetblue(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetblue);
  return f_pixelgetblue(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetbluequantum f_pixelgetbluequantum
#else
inline double x_pixelgetbluequantum(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetbluequantum);
  return f_pixelgetbluequantum(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetcolorasstring f_pixelgetcolorasstring
#else
inline String x_pixelgetcolorasstring(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetcolorasstring);
  return f_pixelgetcolorasstring(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetcolorcount f_pixelgetcolorcount
#else
inline double x_pixelgetcolorcount(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetcolorcount);
  return f_pixelgetcolorcount(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetcyan f_pixelgetcyan
#else
inline double x_pixelgetcyan(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetcyan);
  return f_pixelgetcyan(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetcyanquantum f_pixelgetcyanquantum
#else
inline double x_pixelgetcyanquantum(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetcyanquantum);
  return f_pixelgetcyanquantum(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetexception f_pixelgetexception
#else
inline Array x_pixelgetexception(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetexception);
  return f_pixelgetexception(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetexceptionstring f_pixelgetexceptionstring
#else
inline String x_pixelgetexceptionstring(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetexceptionstring);
  return f_pixelgetexceptionstring(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetexceptiontype f_pixelgetexceptiontype
#else
inline int x_pixelgetexceptiontype(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetexceptiontype);
  return f_pixelgetexceptiontype(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetgreen f_pixelgetgreen
#else
inline double x_pixelgetgreen(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetgreen);
  return f_pixelgetgreen(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetgreenquantum f_pixelgetgreenquantum
#else
inline double x_pixelgetgreenquantum(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetgreenquantum);
  return f_pixelgetgreenquantum(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetindex f_pixelgetindex
#else
inline double x_pixelgetindex(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetindex);
  return f_pixelgetindex(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetmagenta f_pixelgetmagenta
#else
inline double x_pixelgetmagenta(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetmagenta);
  return f_pixelgetmagenta(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetmagentaquantum f_pixelgetmagentaquantum
#else
inline double x_pixelgetmagentaquantum(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetmagentaquantum);
  return f_pixelgetmagentaquantum(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetopacity f_pixelgetopacity
#else
inline double x_pixelgetopacity(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetopacity);
  return f_pixelgetopacity(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetopacityquantum f_pixelgetopacityquantum
#else
inline double x_pixelgetopacityquantum(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetopacityquantum);
  return f_pixelgetopacityquantum(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetquantumcolor f_pixelgetquantumcolor
#else
inline Array x_pixelgetquantumcolor(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetquantumcolor);
  return f_pixelgetquantumcolor(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetred f_pixelgetred
#else
inline double x_pixelgetred(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetred);
  return f_pixelgetred(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetredquantum f_pixelgetredquantum
#else
inline double x_pixelgetredquantum(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetredquantum);
  return f_pixelgetredquantum(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetyellow f_pixelgetyellow
#else
inline double x_pixelgetyellow(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetyellow);
  return f_pixelgetyellow(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetyellowquantum f_pixelgetyellowquantum
#else
inline double x_pixelgetyellowquantum(CObjRef pxl_wnd) {
  FUNCTION_INJECTION(pixelgetyellowquantum);
  return f_pixelgetyellowquantum(pxl_wnd);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetalpha f_pixelsetalpha
#else
inline void x_pixelsetalpha(CObjRef pxl_wnd, double alpha) {
  FUNCTION_INJECTION(pixelsetalpha);
  f_pixelsetalpha(pxl_wnd, alpha);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetalphaquantum f_pixelsetalphaquantum
#else
inline void x_pixelsetalphaquantum(CObjRef pxl_wnd, double alpha) {
  FUNCTION_INJECTION(pixelsetalphaquantum);
  f_pixelsetalphaquantum(pxl_wnd, alpha);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetblack f_pixelsetblack
#else
inline void x_pixelsetblack(CObjRef pxl_wnd, double black) {
  FUNCTION_INJECTION(pixelsetblack);
  f_pixelsetblack(pxl_wnd, black);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetblackquantum f_pixelsetblackquantum
#else
inline void x_pixelsetblackquantum(CObjRef pxl_wnd, double black) {
  FUNCTION_INJECTION(pixelsetblackquantum);
  f_pixelsetblackquantum(pxl_wnd, black);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetblue f_pixelsetblue
#else
inline void x_pixelsetblue(CObjRef pxl_wnd, double blue) {
  FUNCTION_INJECTION(pixelsetblue);
  f_pixelsetblue(pxl_wnd, blue);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetbluequantum f_pixelsetbluequantum
#else
inline void x_pixelsetbluequantum(CObjRef pxl_wnd, double blue) {
  FUNCTION_INJECTION(pixelsetbluequantum);
  f_pixelsetbluequantum(pxl_wnd, blue);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetcolor f_pixelsetcolor
#else
inline void x_pixelsetcolor(CObjRef pxl_wnd, CStrRef imagemagick_col_str) {
  FUNCTION_INJECTION(pixelsetcolor);
  f_pixelsetcolor(pxl_wnd, imagemagick_col_str);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetcolorcount f_pixelsetcolorcount
#else
inline void x_pixelsetcolorcount(CObjRef pxl_wnd, int count) {
  FUNCTION_INJECTION(pixelsetcolorcount);
  f_pixelsetcolorcount(pxl_wnd, count);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetcyan f_pixelsetcyan
#else
inline void x_pixelsetcyan(CObjRef pxl_wnd, double cyan) {
  FUNCTION_INJECTION(pixelsetcyan);
  f_pixelsetcyan(pxl_wnd, cyan);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetcyanquantum f_pixelsetcyanquantum
#else
inline void x_pixelsetcyanquantum(CObjRef pxl_wnd, double cyan) {
  FUNCTION_INJECTION(pixelsetcyanquantum);
  f_pixelsetcyanquantum(pxl_wnd, cyan);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetgreen f_pixelsetgreen
#else
inline void x_pixelsetgreen(CObjRef pxl_wnd, double green) {
  FUNCTION_INJECTION(pixelsetgreen);
  f_pixelsetgreen(pxl_wnd, green);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetgreenquantum f_pixelsetgreenquantum
#else
inline void x_pixelsetgreenquantum(CObjRef pxl_wnd, double green) {
  FUNCTION_INJECTION(pixelsetgreenquantum);
  f_pixelsetgreenquantum(pxl_wnd, green);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetindex f_pixelsetindex
#else
inline void x_pixelsetindex(CObjRef pxl_wnd, double index) {
  FUNCTION_INJECTION(pixelsetindex);
  f_pixelsetindex(pxl_wnd, index);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetmagenta f_pixelsetmagenta
#else
inline void x_pixelsetmagenta(CObjRef pxl_wnd, double magenta) {
  FUNCTION_INJECTION(pixelsetmagenta);
  f_pixelsetmagenta(pxl_wnd, magenta);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetmagentaquantum f_pixelsetmagentaquantum
#else
inline void x_pixelsetmagentaquantum(CObjRef pxl_wnd, double magenta) {
  FUNCTION_INJECTION(pixelsetmagentaquantum);
  f_pixelsetmagentaquantum(pxl_wnd, magenta);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetopacity f_pixelsetopacity
#else
inline void x_pixelsetopacity(CObjRef pxl_wnd, double opacity) {
  FUNCTION_INJECTION(pixelsetopacity);
  f_pixelsetopacity(pxl_wnd, opacity);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetopacityquantum f_pixelsetopacityquantum
#else
inline void x_pixelsetopacityquantum(CObjRef pxl_wnd, double opacity) {
  FUNCTION_INJECTION(pixelsetopacityquantum);
  f_pixelsetopacityquantum(pxl_wnd, opacity);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetquantumcolor f_pixelsetquantumcolor
#else
inline void x_pixelsetquantumcolor(CObjRef pxl_wnd, double red, double green, double blue, double opacity = 0.0) {
  FUNCTION_INJECTION(pixelsetquantumcolor);
  f_pixelsetquantumcolor(pxl_wnd, red, green, blue, opacity);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetred f_pixelsetred
#else
inline void x_pixelsetred(CObjRef pxl_wnd, double red) {
  FUNCTION_INJECTION(pixelsetred);
  f_pixelsetred(pxl_wnd, red);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetredquantum f_pixelsetredquantum
#else
inline void x_pixelsetredquantum(CObjRef pxl_wnd, double red) {
  FUNCTION_INJECTION(pixelsetredquantum);
  f_pixelsetredquantum(pxl_wnd, red);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetyellow f_pixelsetyellow
#else
inline void x_pixelsetyellow(CObjRef pxl_wnd, double yellow) {
  FUNCTION_INJECTION(pixelsetyellow);
  f_pixelsetyellow(pxl_wnd, yellow);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetyellowquantum f_pixelsetyellowquantum
#else
inline void x_pixelsetyellowquantum(CObjRef pxl_wnd, double yellow) {
  FUNCTION_INJECTION(pixelsetyellowquantum);
  f_pixelsetyellowquantum(pxl_wnd, yellow);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetiteratorexception f_pixelgetiteratorexception
#else
inline Array x_pixelgetiteratorexception(CObjRef pxl_iter) {
  FUNCTION_INJECTION(pixelgetiteratorexception);
  return f_pixelgetiteratorexception(pxl_iter);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetiteratorexceptionstring f_pixelgetiteratorexceptionstring
#else
inline String x_pixelgetiteratorexceptionstring(CObjRef pxl_iter) {
  FUNCTION_INJECTION(pixelgetiteratorexceptionstring);
  return f_pixelgetiteratorexceptionstring(pxl_iter);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetiteratorexceptiontype f_pixelgetiteratorexceptiontype
#else
inline int x_pixelgetiteratorexceptiontype(CObjRef pxl_iter) {
  FUNCTION_INJECTION(pixelgetiteratorexceptiontype);
  return f_pixelgetiteratorexceptiontype(pxl_iter);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelgetnextiteratorrow f_pixelgetnextiteratorrow
#else
inline Array x_pixelgetnextiteratorrow(CObjRef pxl_iter) {
  FUNCTION_INJECTION(pixelgetnextiteratorrow);
  return f_pixelgetnextiteratorrow(pxl_iter);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelresetiterator f_pixelresetiterator
#else
inline void x_pixelresetiterator(CObjRef pxl_iter) {
  FUNCTION_INJECTION(pixelresetiterator);
  f_pixelresetiterator(pxl_iter);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsetiteratorrow f_pixelsetiteratorrow
#else
inline bool x_pixelsetiteratorrow(CObjRef pxl_iter, int row) {
  FUNCTION_INJECTION(pixelsetiteratorrow);
  return f_pixelsetiteratorrow(pxl_iter, row);
}
#endif

#ifndef PROFILE_BUILTIN
#define x_pixelsynciterator f_pixelsynciterator
#else
inline bool x_pixelsynciterator(CObjRef pxl_iter) {
  FUNCTION_INJECTION(pixelsynciterator);
  return f_pixelsynciterator(pxl_iter);
}
#endif


///////////////////////////////////////////////////////////////////////////////
}

#endif // __EXTPROFILE_MAGICK_H__
