
#ifndef __EXT_PHP_MCC_H__
#define __EXT_PHP_MCC_H__

// >>>>>> Generated by idl.php. Do NOT modify. <<<<<<
#include "ext_php_mcc_resource.h"

#include <cpp/base/base_includes.h>

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

extern const int64 k_MCC_IPPROTO_TCP;
extern const int64 k_MCC_IPPROTO_UDP;
extern const int64 k_MCC_SERVER_UP;
extern const int64 k_MCC_SERVER_DOWN;
extern const int64 k_MCC_SERVER_DISABLED;
extern const int64 k_MCC_SERVER_RETRY_TMO_MS;
extern const int64 k_MCC_DGRAM_TMO_THRESHOLD;
extern const int64 k_MCC_PORT_DEFAULT;
extern const int64 k_MCC_POOLPREFIX_LEN;
extern const int64 k_MCC_MTU;
extern const int64 k_MCC_RXDGRAM_MAX;
extern const int64 k_MCC_CONN_TMO_MS;
extern const int64 k_MCC_CONN_NTRIES;
extern const int64 k_MCC_DGRAM_NTRIES;
extern const double k_MCC_DGRAM_TMO_WEIGHT;
extern const int64 k_MCC_NODELAY;
extern const int64 k_MCC_POLL_TMO_US;
extern const int64 k_MCC_PROXY_DELETE_OP;
extern const int64 k_MCC_PROXY_UPDATE_OP;
extern const int64 k_MCC_PROXY_ARITH_OP;
extern const int64 k_MCC_PROXY_GET_OP;
extern const int64 k_MCC_TMO_MS;
extern const int64 k_MCC_UDP_REPLY_PORTS;
extern const int64 k_MCC_WINDOW_MAX;
extern const int64 k_MCC_HAVE_FB_SERIALIZATION;
extern const StaticString k_MCC_ARG_FB_SERIALIZE_ENABLED;
extern const StaticString k_MCC_ARG_CONSISTENT_HASHING_PREFIXES;
extern const int64 k_MCC_HAVE_DEBUG_LOG;
extern const StaticString k_MCC_ARG_DEBUG;
extern const StaticString k_MCC_ARG_DEBUG_LOGFILE;
extern const int64 k_MCC_HAVE_ZLIB_COMPRESSION;
extern const int64 k_MCC_COMPRESSION_THRESHHOLD;
extern const StaticString k_MCC_ARG_SERVERS;
extern const StaticString k_MCC_ARG_MIRROR_CFG;
extern const StaticString k_MCC_ARG_MIRROR_CFG_NAME;
extern const StaticString k_MCC_ARG_MIRROR_CFG_MODEL;
extern const StaticString k_MCC_ARG_MIRROR_CFG_SERVERPOOLS;
extern const StaticString k_MCC_ARG_COMPRESSION_THRESHOLD;
extern const StaticString k_MCC_ARG_NZLIB_COMPRESSION;
extern const StaticString k_MCC_ARG_CONN_TMO;
extern const StaticString k_MCC_ARG_CONN_NTRIES;
extern const StaticString k_MCC_ARG_DEFAULT_PREFIX;
extern const StaticString k_MCC_ARG_DELETE_PROXY;
extern const StaticString k_MCC_ARG_DGRAM_NTRIES;
extern const StaticString k_MCC_ARG_DGRAM_TMO_WEIGHT;
extern const StaticString k_MCC_ARG_NODELAY;
extern const StaticString k_MCC_ARG_PERSISTENT;
extern const StaticString k_MCC_ARG_POLL_TMO;
extern const StaticString k_MCC_ARG_PROXY;
extern const StaticString k_MCC_ARG_PROXY_OPS;
extern const StaticString k_MCC_ARG_TMO;
extern const StaticString k_MCC_ARG_TCP_INACTIVITY_TIME;
extern const StaticString k_MCC_ARG_NPOOLPREFIX;
extern const int64 k_MCC_TCP_INACTIVITY_TMO_DEFAULT;
extern const StaticString k_MCC_ARG_UDP_REPLY_PORTS;
extern const StaticString k_MCC_ARG_WINDOW_MAX;
extern const int64 k_MCC_CONSISTENCY_IGNORE;
extern const int64 k_MCC_CONSISTENCY_MATCH_ALL;
extern const int64 k_MCC_CONSISTENCY_MATCH_HITS;
extern const int64 k_MCC_CONSISTENCY_MATCH_HITS_SUPERCEDES;
extern const StaticString k_MCC_ARG_SERVER_RETRY_TMO_MS;
extern const StaticString k_MCC_ARG_DGRAM_TMO_THRESHOLD;
extern const int64 k_MCC_GET_RECORD_ERRORS;
extern const int64 k_MCC_DELETE_DELETED;
extern const int64 k_MCC_DELETE_NOTFOUND;
extern const int64 k_MCC_DELETE_ERROR_LOG;
extern const int64 k_MCC_DELETE_ERROR_NOLOG;
extern const int64 k_PHPMCC_NEW_HANDLE;
extern const int64 k_PHPMCC_USED_FAST_PATH;
extern const int64 k_PHPMCC_USED_SLOW_PATH;
extern const StaticString k_PHPMCC_VERSION;
extern const int64 q_phpmcc_IPPROTO_TCP;
extern const int64 q_phpmcc_IPPROTO_UDP;

///////////////////////////////////////////////////////////////////////////////
// class phpmcc

FORWARD_DECLARE_CLASS(phpmcc);
class c_phpmcc : public ObjectData {
 public:
  BEGIN_CLASS_MAP(phpmcc)
  END_CLASS_MAP(phpmcc)
  DECLARE_CLASS(phpmcc, phpmcc, ObjectData)
  DECLARE_INVOKES_FROM_EVAL
  ObjectData* dynCreate(CArrRef params, bool init = true);

  // need to implement
  public: c_phpmcc();
  public: ~c_phpmcc();
  public: void t___construct(CStrRef name, bool persistent = true, int64 npoolprefix = k_MCC_POOLPREFIX_LEN, int64 mtu = k_MCC_MTU, int64 rxdgram_max = k_MCC_NODELAY, int64 nodelay = k_MCC_CONN_TMO_MS, int64 conn_tmo = k_MCC_CONN_TMO_MS, int64 conn_ntries = k_MCC_CONN_NTRIES, int64 tmo = k_MCC_TMO_MS, int64 dgram_ntries = k_MCC_DGRAM_NTRIES, double dgram_tmo_weight = k_MCC_DGRAM_TMO_WEIGHT, int64 server_retry_tmo = k_MCC_SERVER_RETRY_TMO_MS, int64 dgram_tmo_threshold = k_MCC_DGRAM_TMO_THRESHOLD, int64 window_max = k_MCC_WINDOW_MAX);
  public: Variant t___destruct();
  public: String t___tostring();
  public: Variant t___set(Variant name, Variant val);
  public: Variant t___get(Variant name);
  public: bool t_close();
  public: bool t_del();
  public: int64 t_add_accesspoint(CStrRef server, CStrRef host, CStrRef port = "11211", int64 protocol = k_MCC_IPPROTO_TCP);
  public: void t_remove_accesspoint(CStrRef server, CStrRef host, CStrRef port = "11211", int64 protocol = k_MCC_IPPROTO_TCP);
  public: Variant t_get_accesspoints(CStrRef server);
  public: Variant t_get_server(CStrRef server);
  public: Variant t_add_mirror_accesspoint(CStrRef mirrorname, CStrRef server, CStrRef host, CStrRef port = "11211", int64 protocol = k_MCC_IPPROTO_TCP);
  public: void t_remove_mirror_accesspoint(CStrRef mirrorname, CStrRef server, CStrRef host, CStrRef port = "11211", int64 protocol = k_MCC_IPPROTO_TCP);
  public: int64 t_add_server(CStrRef server, CStrRef mirror = "");
  public: void t_remove_server(CStrRef server, CStrRef mirror = "");
  public: bool t_server_flush(CStrRef server, int64 exptime = 0);
  public: Variant t_server_version(CStrRef server);
  public: bool t_server_is_alive(CStrRef server = "");
  public: bool t_test_proxy(CStrRef server = "");
  public: Variant t_add_mirror(CStrRef mirrorname, int64 model);
  public: Variant t_remove_mirror(CStrRef mirrorname);
  public: Variant t_add_serverpool(CStrRef serverpool, bool consistent_hashing_enabled = false);
  public: Variant t_add_serverpool_ex(CStrRef serverpool, int64 version_flag);
  public: void t_remove_serverpool(CStrRef serverpool);
  public: bool t_add_accesspoint_listener(CStrRef function, Variant context);
  public: bool t_remove_accesspoint_listener(CStrRef function, Variant context);
  public: bool t_add_server_listener(CStrRef function, Variant context);
  public: bool t_remove_server_listener(CStrRef function, Variant context);
  public: bool t_add_error_listener(CStrRef function, Variant context);
  public: bool t_remove_error_listener(CStrRef function, Variant context);
  public: Variant t_get_server_by_key(CStrRef key);
  public: Variant t_get_host(CStrRef key);
  public: Variant t_get_serverpool_by_key(CStrRef key);
  public: Variant t_serverpool_add_server(CStrRef serverpool, CStrRef server, CStrRef mirrorname = "");
  public: Variant t_serverpool_remove_server(CStrRef serverpool, CStrRef server, CStrRef mirrorname = "");
  public: Variant t_serverpool_get_servers(CStrRef serverpool);
  public: Variant t_serverpool_get_consistent_hashing_enabled(CStrRef serverpool);
  public: Variant t_serverpool_get_consistent_hashing_version(CStrRef serverpool);
  public: Variant t_multi_add(CArrRef keys_values, int64 exptime = 0, int64 compress = 1, int64 proxy_replicate = 0, int64 async_set = 0);
  public: Variant t_multi_replace(CArrRef keys_values, int64 exptime = 0, int64 compress = 1, int64 proxy_replicate = 0, int64 async_set = 0);
  public: Variant t_multi_set(CArrRef keys_values, int64 exptime = 0, int64 compress = 1, int64 proxy_replicate = 0, int64 async_set = 0);
  public: Variant t_add(CVarRef key, CVarRef value, int64 exptime = 0, bool compress = true, int64 proxy_replicate = 0, int64 async_set = 0);
  public: Variant t_decr(CStrRef key, int64 value = 1);
  public: Variant t_incr(CStrRef key, int64 value = 1);
  public: Variant t_delete(CVarRef keys, int64 exptime = 0);
  public: Variant t_delete_details(CVarRef keys, int64 exptime = 0);
  public: Variant t_get(CVarRef keys, int64 detailed_info_mode = 0, Variant detailed_info = null);
  public: Variant t_get_multi(CVarRef keys, int64 detailed_info_mode = 0, Variant detailed_info = null);
  public: Variant t_replace(CVarRef key, CVarRef value, int64 exptime = 0, bool compress = true, int64 proxy_replicate = 0, int64 async_set = 0);
  public: Variant t_set(CVarRef key, CVarRef value, int64 exptime = 0, bool compress = true, int64 proxy_replicate = 0, int64 async_set = 0);
  public: Variant t_stats(int64 clear = 0);

  // implemented by HPHP
  public: ObjectData *create(String name, bool persistent = true, int64 npoolprefix = k_MCC_POOLPREFIX_LEN, int64 mtu = k_MCC_MTU, int64 rxdgram_max = k_MCC_NODELAY, int64 nodelay = k_MCC_CONN_TMO_MS, int64 conn_tmo = k_MCC_CONN_TMO_MS, int64 conn_ntries = k_MCC_CONN_NTRIES, int64 tmo = k_MCC_TMO_MS, int64 dgram_ntries = k_MCC_DGRAM_NTRIES, double dgram_tmo_weight = k_MCC_DGRAM_TMO_WEIGHT, int64 server_retry_tmo = k_MCC_SERVER_RETRY_TMO_MS, int64 dgram_tmo_threshold = k_MCC_DGRAM_TMO_THRESHOLD, int64 window_max = k_MCC_WINDOW_MAX);
  public: void dynConstruct(CArrRef Params);
  public: virtual void destruct();

  public: MccResourcePtr m_mcc;
};

///////////////////////////////////////////////////////////////////////////////
}

#endif // __EXT_PHP_MCC_H__
