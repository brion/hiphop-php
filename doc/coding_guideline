<h2>Coding Guidelines</h2>

1. Coding Styles

Follow existing code when in doubt.

(1) Braces

- Put starting brace on the same line, not on a new line:

  if (something) {
  }

(2) Indentations

- No tabs. Only two spaces.
- Namespaces don't introduce indentations:

  namespace N1 { namespace N2 {
  class StillStartFromBeginning {
  };
  }}

- Switch-cases don't introduce indentations:

  switch (...) {
  case: // no indentation here
  }

(3) Column Widths

- No more than 80 characters on a line.
- Vertically align coding if possible, but this is optional.

  int         m_num;
  std::string m_str;

(4) Conciseness

- Allow short if statements:

  if (...) one-liner;

- When possible, fit one function into one screen-ful. Or, no long functions.

(5) Naming

- Class instance members start with "<b>m_</b>", unless trivial class/struct.
- Class static members start with "<b>s_</b>".
- Class instance methods use <b>camelCase</b>.
- Class static methods start with <b>CapitalLetters</b>.
- Global functions use <b>small_underscore_small</b>() style.

(6) License Info

- run "php license.php" from src/, and it will automatically add license info.

2. Library Dependencies

(1) Utility Library

util/ is at very bottom of the ladder. It may not depend on anything other
than external libraries. Therefore, if it includes anything cpp/, it's
wrong.

Since it doesn't depend on any other libraries, includes can use double-quotes:

  #include "thread_local.h"  // including a local file

(2) Core Runtime Library

cpp/base and cpp/eval depend on util/. Since there may be file name conflicts,
ALWAYS use full include paths starting after src/. No double-quote include is
allowed:

  #include &lt;cpp/base/exceptions.h&gt;

(3) Extension Library

cpp/ext should theoretically strictly depend on cpp/base. We have messed up
some part of it, and we will clean them up. Please do NOT introduce more
violations.

(4) Generated Code

Generated code provides some functions, for example invoke(), that's referenced
by cpp/base and cpp/ext. We will come up with a solution to resolve this, maybe
by some raw pointers initialization routines. We want generated code to be on
top of the hierarchy after the modification.

